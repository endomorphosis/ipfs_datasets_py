name: PDF Processing Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ipfs_datasets_py/pdf_processing/**'
      - 'ipfs_datasets_py/mcp_server/tools/pdf_tools/**' 
      - 'tests/**'
      - 'requirements.txt'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ipfs_datasets_py/pdf_processing/**'
      - 'ipfs_datasets_py/mcp_server/tools/pdf_tools/**'
      - 'tests/**'
      - 'requirements.txt'

env:
  PYTHON_VERSION: '3.12'
  PYTEST_TIMEOUT: '300'  # 5 minutes

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r requirements.txt
    
    - name: Run Black formatter check
      run: |
        black --check --diff ipfs_datasets_py/pdf_processing/
        black --check --diff ipfs_datasets_py/mcp_server/tools/pdf_tools/
        black --check --diff tests/
      continue-on-error: true  # Formatting is advisory for now
    
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff ipfs_datasets_py/pdf_processing/
        isort --check-only --diff ipfs_datasets_py/mcp_server/tools/pdf_tools/
        isort --check-only --diff tests/
      continue-on-error: true  # Import sorting is advisory for now
    
    - name: Run flake8 linting
      run: |
        flake8 ipfs_datasets_py/pdf_processing/ --max-line-length=100 --extend-ignore=E203,W503
        flake8 ipfs_datasets_py/mcp_server/tools/pdf_tools/ --max-line-length=100 --extend-ignore=E203,W503
        flake8 tests/ --max-line-length=100 --extend-ignore=E203,W503
      continue-on-error: true  # Linting is advisory for now
    
    - name: Run mypy type checking
      run: |
        mypy ipfs_datasets_py/pdf_processing/ --ignore-missing-imports
        mypy ipfs_datasets_py/mcp_server/tools/pdf_tools/ --ignore-missing-imports
      continue-on-error: true  # Type checking is advisory for now

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
        test-group: ['pdf-processing', 'mcp-tools', 'utils']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
        # Install other OCR dependencies as needed
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-timeout pytest-xdist
    
    - name: Run unit tests - PDF Processing
      if: matrix.test-group == 'pdf-processing'
      run: |
        pytest tests/unit/test_pdf_processor_unit.py \
          tests/unit/test_ocr_engine_unit.py \
          tests/unit/test_graphrag_integrator_unit.py \
          tests/unit/test_query_engine_unit.py \
          --cov=ipfs_datasets_py.pdf_processing \
          --cov-report=xml \
          --cov-report=term-missing \
          --timeout=${{ env.PYTEST_TIMEOUT }} \
          -v
    
    - name: Run unit tests - MCP Tools
      if: matrix.test-group == 'mcp-tools'
      run: |
        pytest tests/unit/test_mcp_pdf_tools.py \
          --cov=ipfs_datasets_py.mcp_server.tools.pdf_tools \
          --cov-report=xml \
          --cov-report=term-missing \
          --timeout=${{ env.PYTEST_TIMEOUT }} \
          -v
    
    - name: Run unit tests - Utils
      if: matrix.test-group == 'utils'
      run: |
        pytest tests/unit/ \
          --ignore=tests/unit/test_pdf_processor_unit.py \
          --ignore=tests/unit/test_ocr_engine_unit.py \
          --ignore=tests/unit/test_graphrag_integrator_unit.py \
          --ignore=tests/unit/test_query_engine_unit.py \
          --ignore=tests/unit/test_mcp_pdf_tools.py \
          --cov=ipfs_datasets_py.utils \
          --cov-report=xml \
          --cov-report=term-missing \
          --timeout=${{ env.PYTEST_TIMEOUT }} \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-timeout
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --timeout=${{ env.PYTEST_TIMEOUT }} \
          -v \
          --tb=short \
          --continue-on-collection-errors
      continue-on-error: true  # Some integration tests may require optional dependencies
    
    - name: Upload integration test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-artifacts
        path: |
          tests/fixtures/test_output/
          *.log

  mcp-server-tests:
    name: MCP Server Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-timeout
    
    - name: Run MCP server tests
      run: |
        pytest tests/mcp/ \
          --timeout=${{ env.PYTEST_TIMEOUT }} \
          -v \
          --tb=short
    
    - name: Test MCP tool registration
      run: |
        python -c "
        from ipfs_datasets_py.mcp_server.tools.pdf_tools import *
        print('✅ All MCP tools imported successfully')
        "
      continue-on-error: true  # Some tools may require optional dependencies

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-benchmark memory_profiler
    
    - name: Run performance benchmarks
      run: |
        python -m pytest tests/integration/test_pdf_mcp_integration.py::TestPerformanceIntegration \
          --benchmark-only \
          --benchmark-json=benchmark_results.json \
          -v
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: |
        bandit -r ipfs_datasets_py/pdf_processing/ \
          -f json -o bandit_report.json
        bandit -r ipfs_datasets_py/mcp_server/tools/pdf_tools/ \
          -f json -o bandit_mcp_report.json
      continue-on-error: true
    
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety_report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit_report.json
          bandit_mcp_report.json
          safety_report.json

  docker-tests:
    name: Docker Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t ipfs-datasets-pdf:test .
    
    - name: Test Docker container
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/tests:/app/tests \
          ipfs-datasets-pdf:test \
          python -m pytest tests/unit/test_pdf_processing.py::TestPDFProcessor::test_pdf_processor_initialization -v
    
    - name: Test MCP tools in container
      run: |
        docker run --rm \
          ipfs-datasets-pdf:test \
          python -c "
          from ipfs_datasets_py.pdf_processing import PDFProcessor
          from ipfs_datasets_py.mcp_server.tools.pdf_tools import pdf_ingest_to_graphrag
          print('✅ PDF processing and MCP tools work in Docker')
          "

  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    needs: [integration-tests, mcp-server-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Test package installation
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        python -c "
        import ipfs_datasets_py
        from ipfs_datasets_py.pdf_processing import PDFProcessor
        print('✅ Package installs and imports correctly')
        "
    
    - name: Test CLI functionality
      run: |
        # Test any CLI commands if they exist
        python -m ipfs_datasets_py.pdf_processing --help || true
    
    - name: Run quick smoke tests
      run: |
        python archive/experiments/pdf_processing_quick_test.py || echo "Quick test not available, skipping"
      continue-on-error: true

  notify-status:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, integration-tests, mcp-server-tests]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.lint-and-format.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.mcp-server-tests.result == 'success' }}
      run: |
        echo "✅ All tests passed successfully!"
        echo "PDF processing pipeline and MCP tools are ready for deployment."
    
    - name: Notify failure
      if: ${{ needs.lint-and-format.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.mcp-server-tests.result == 'failure' }}
      run: |
        echo "❌ Some tests failed. Please check the logs."
        exit 1
