name: Copilot Agent Auto-Healing

on:
  workflow_run:
    workflows: ["*"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      workflow_name:
        description: 'Name of the failed workflow to analyze'
        required: false
        type: string
      run_id:
        description: 'Specific workflow run ID to analyze'
        required: false
        type: string
      force_create_pr:
        description: 'Force create PR even if confidence is low'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

env:
  PYTHON_VERSION: '3.10'

jobs:
  autofix-with-copilot-agent:
    runs-on: ubuntu-latest
    # Only run if the triggering workflow failed and it's not another auto-fix workflow
    if: >
      github.event_name == 'workflow_dispatch' || 
      (github.event.workflow_run.conclusion == 'failure' && 
       !contains(github.event.workflow_run.name, 'Auto-Healing') &&
       !contains(github.event.workflow_run.name, 'Auto-Fix'))
    
    steps:
      - name: Debug workflow trigger information
        run: |
          echo "## 🔍 Workflow Trigger Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Event Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Event Name**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run Conclusion**: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run Event**: ${{ github.event.workflow_run.event }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run Name**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run ID**: ${{ github.event.workflow_run.id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Condition Checks" >> $GITHUB_STEP_SUMMARY
          echo "- **Is workflow_dispatch**: ${{ github.event_name == 'workflow_dispatch' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Conclusion is failure**: ${{ github.event.workflow_run.conclusion == 'failure' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Name doesn't contain Auto-Healing**: ${{ !contains(github.event.workflow_run.name, 'Auto-Healing') }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Name doesn't contain Auto-Fix**: ${{ !contains(github.event.workflow_run.name, 'Auto-Fix') }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **This workflow is running because all conditions were met**" >> $GITHUB_STEP_SUMMARY
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests
      
      - name: Get workflow run details
        id: get_run_details
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.run_id }}" ]; then
              RUN_ID="${{ github.event.inputs.run_id }}"
            else
              # Get the latest failed run for the specified workflow
              WORKFLOW_NAME="${{ github.event.inputs.workflow_name }}"
              echo "Getting latest failed run for workflow: $WORKFLOW_NAME"
              RUN_ID=$(gh run list --workflow="$WORKFLOW_NAME" --status=failure --limit=1 --json databaseId --jq '.[0].databaseId' || echo "")
            fi
          else
            RUN_ID="${{ github.event.workflow_run.id }}"
          fi
          
          if [ -z "$RUN_ID" ]; then
            echo "No workflow run ID found"
            exit 0
          fi
          
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          
          # Get workflow details
          WORKFLOW_NAME=$(gh run view $RUN_ID --json workflowName --jq '.workflowName')
          HEAD_BRANCH=$(gh run view $RUN_ID --json headBranch --jq '.headBranch')
          HEAD_SHA=$(gh run view $RUN_ID --json headSha --jq '.headSha')
          
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          
          echo "## Workflow Failure Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: $WORKFLOW_NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: $RUN_ID" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: $HEAD_BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA**: $HEAD_SHA" >> $GITHUB_STEP_SUMMARY
      
      - name: Download workflow logs
        id: download_logs
        if: steps.get_run_details.outputs.run_id != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUN_ID="${{ steps.get_run_details.outputs.run_id }}"
          
          echo "📥 Downloading logs for run $RUN_ID..."
          mkdir -p /tmp/workflow_logs
          
          # Get failed jobs
          gh run view $RUN_ID --json jobs --jq '.jobs[] | select(.conclusion == "failure") | .databaseId' > /tmp/failed_jobs.txt
          
          if [ ! -s /tmp/failed_jobs.txt ]; then
            echo "No failed jobs found"
            echo "has_failures=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "has_failures=true" >> $GITHUB_OUTPUT
          
          # Download logs for each failed job
          while IFS= read -r job_id; do
            if [ -n "$job_id" ]; then
              echo "Downloading logs for job $job_id..."
              gh run view $RUN_ID --log --job $job_id > "/tmp/workflow_logs/job_${job_id}.log" 2>&1 || true
            fi
          done < /tmp/failed_jobs.txt
          
          # Create a summary of failures
          echo "## Failed Jobs Summary" > /tmp/workflow_logs/summary.txt
          gh run view $RUN_ID --json jobs --jq '.jobs[] | select(.conclusion == "failure") | "### \(.name)\n- Status: \(.conclusion)\n- Steps: \(.steps[] | select(.conclusion == "failure") | .name)\n"' >> /tmp/workflow_logs/summary.txt
          
          cat /tmp/workflow_logs/summary.txt
      
      - name: Analyze workflow failure
        id: analyze_failure
        if: steps.download_logs.outputs.has_failures == 'true'
        run: |
          python .github/scripts/analyze_workflow_failure.py \
            --run-id "${{ steps.get_run_details.outputs.run_id }}" \
            --workflow-name "${{ steps.get_run_details.outputs.workflow_name }}" \
            --logs-dir /tmp/workflow_logs \
            --output /tmp/failure_analysis.json
          
          if [ -f /tmp/failure_analysis.json ]; then
            echo "analysis_available=true" >> $GITHUB_OUTPUT
            
            # Extract key findings for summary
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Failure Analysis" >> $GITHUB_STEP_SUMMARY
            python -c "
          import json
          with open('/tmp/failure_analysis.json') as f:
              data = json.load(f)
              print('- **Error Type**: ' + data.get('error_type', 'Unknown'))
              print('- **Root Cause**: ' + data.get('root_cause', 'Not identified'))
              print('- **Fix Confidence**: ' + str(data.get('fix_confidence', 0)) + '%')
          " >> $GITHUB_STEP_SUMMARY
          else
            echo "analysis_available=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate fix proposal
        id: generate_fix
        if: steps.analyze_failure.outputs.analysis_available == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python .github/scripts/generate_workflow_fix.py \
            --analysis /tmp/failure_analysis.json \
            --workflow-name "${{ steps.get_run_details.outputs.workflow_name }}" \
            --output /tmp/fix_proposal.json
          
          if [ -f /tmp/fix_proposal.json ]; then
            echo "fix_available=true" >> $GITHUB_OUTPUT
            
            # Extract fix details
            FIX_BRANCH=$(python -c "import json; print(json.load(open('/tmp/fix_proposal.json'))['branch_name'])")
            FIX_TITLE=$(python -c "import json; print(json.load(open('/tmp/fix_proposal.json'))['pr_title'])")
            
            echo "fix_branch=$FIX_BRANCH" >> $GITHUB_OUTPUT
            echo "fix_title=$FIX_TITLE" >> $GITHUB_OUTPUT
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Fix Proposal" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch**: \`$FIX_BRANCH\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Title**: $FIX_TITLE" >> $GITHUB_STEP_SUMMARY
          else
            echo "fix_available=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create fix branch with analysis
        id: create_branch
        if: steps.generate_fix.outputs.fix_available == 'true'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create and checkout fix branch
          BRANCH_NAME="${{ steps.generate_fix.outputs.fix_branch }}"
          git checkout -b "$BRANCH_NAME"
          
          # Create a Copilot task file with detailed instructions
          mkdir -p .github/copilot-tasks
          cat > .github/copilot-tasks/fix-workflow-failure.md << 'TASK_EOF'
          # Fix Workflow Failure
          
          ## Problem Statement
          The workflow "${{ steps.get_run_details.outputs.workflow_name }}" (Run ID: ${{ steps.get_run_details.outputs.run_id }}) has failed.
          
          ## Failure Analysis
          $(cat /tmp/failure_analysis.json | python -c "import sys, json; data=json.load(sys.stdin); print(f\"**Error Type**: {data.get('error_type', 'Unknown')}\n**Root Cause**: {data.get('root_cause', 'Not identified')}\n**Confidence**: {data.get('fix_confidence', 0)}%\")")
          
          ## Your Task
          Please analyze the workflow failure and implement a fix following these guidelines:
          
          1. **Review the analysis** in `/tmp/failure_analysis.json`
          2. **Examine the logs** in `/tmp/workflow_logs/`
          3. **Apply the fix** based on the fix proposal in `/tmp/fix_proposal.json`
          4. **Test your changes** to ensure they resolve the issue
          5. **Update documentation** if the fix requires it
          
          ## Fix Proposal
          $(cat /tmp/fix_proposal.json | python -c "import sys, json; data=json.load(sys.stdin); import json; print(json.dumps(data.get('fixes', []), indent=2))")
          
          ## Expected Changes
          - Apply the fixes suggested in the proposal
          - Ensure workflow syntax is correct
          - Maintain consistency with other workflows
          - Add comments explaining complex changes
          
          ## Success Criteria
          - Workflow syntax is valid
          - The specific failure cause is addressed
          - No unrelated changes are made
          - All tests pass when the workflow runs
          
          TASK_EOF
          
          # Add the task file
          git add .github/copilot-tasks/fix-workflow-failure.md
          
          # Check if there are changes
          if ! git diff --cached --quiet; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git commit -m "chore: Add Copilot task for workflow fix"
            git push origin "$BRANCH_NAME"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request and assign to Copilot Agent
        id: create_pr
        if: steps.create_branch.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.generate_fix.outputs.fix_branch }}"
          PR_TITLE="${{ steps.generate_fix.outputs.fix_title }}"
          
          # Read analysis for PR body
          ANALYSIS=$(cat /tmp/failure_analysis.json | python -c "import sys, json; print(json.dumps(json.load(sys.stdin), indent=2))")
          PROPOSAL=$(cat /tmp/fix_proposal.json | python -c "import sys, json; print(json.dumps(json.load(sys.stdin), indent=2))")
          
          # Create comprehensive PR description for Copilot Agent
          cat > /tmp/pr_body.md << 'PR_EOF'
          # 🤖 Automated Workflow Fix
          
          ## Summary
          This PR was automatically created to fix a failure in the **${{ steps.get_run_details.outputs.workflow_name }}** workflow.
          
          @copilot Please analyze this workflow failure and implement the proposed fix.
          
          ## 📊 Failure Details
          - **Run ID**: [${{ steps.get_run_details.outputs.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ steps.get_run_details.outputs.run_id }})
          - **Workflow**: ${{ steps.get_run_details.outputs.workflow_name }}
          - **Branch**: ${{ steps.get_run_details.outputs.head_branch }}
          - **SHA**: ${{ steps.get_run_details.outputs.head_sha }}
          
          ## 🔍 Analysis
          <details>
          <summary>Click to expand failure analysis</summary>
          
          ```json
          PR_EOF
          
          echo "$ANALYSIS" >> /tmp/pr_body.md
          
          cat >> /tmp/pr_body.md << 'PR_EOF'
          ```
          </details>
          
          ## 🔧 Proposed Fix
          <details>
          <summary>Click to expand fix proposal</summary>
          
          ```json
          PR_EOF
          
          echo "$PROPOSAL" >> /tmp/pr_body.md
          
          cat >> /tmp/pr_body.md << 'PR_EOF'
          ```
          </details>
          
          ## 📝 Instructions for Copilot
          
          @copilot Here's what you need to do:
          
          1. **Analyze the failure**: Review the analysis and logs in `/tmp/workflow_logs/`
          2. **Implement the fix**: Apply the changes suggested in the fix proposal
          3. **Validate syntax**: Ensure all YAML files are valid
          4. **Test locally**: If possible, validate the changes won't break other workflows
          5. **Document changes**: Add comments explaining any non-obvious changes
          
          ### Files to Review
          - See `.github/copilot-tasks/fix-workflow-failure.md` for detailed task description
          - Analysis: `/tmp/failure_analysis.json`
          - Proposal: `/tmp/fix_proposal.json`
          - Logs: `/tmp/workflow_logs/`
          
          ### Expected Changes
          Based on the analysis, you should:
          - Apply the fixes from the proposal
          - Update workflow configuration
          - Ensure no syntax errors
          - Maintain consistency with existing patterns
          
          ## ⚠️ Important Notes
          - This PR was automatically generated by the auto-healing system
          - The fix has been analyzed and proposed with confidence score shown above
          - Please review carefully before implementing
          - If the proposed fix is incorrect, close this PR and investigate manually
          
          ## 🔗 Related Links
          - [Failed Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ steps.get_run_details.outputs.run_id }})
          - [Workflow File](.github/workflows/)
          - [Auto-Healing System Documentation](.github/workflows/README-workflow-auto-fix.md)
          
          ---
          
          🤖 **Auto-healing system**: This PR is part of the automated workflow maintenance system. For questions or issues, please refer to the documentation or create an issue.
          PR_EOF
          
          # Create PR
          PR_URL=$(gh pr create \
            --title "$PR_TITLE" \
            --body-file /tmp/pr_body.md \
            --base ${{ steps.get_run_details.outputs.head_branch }} \
            --head "$BRANCH_NAME" \
            --label "automated-fix,workflow-fix,auto-healing")
          
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          PR_NUMBER=$(echo "$PR_URL" | grep -oP '\d+$')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Pull Request Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **PR URL**: $PR_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. GitHub Copilot Agent has been mentioned in the PR" >> $GITHUB_STEP_SUMMARY
          echo "2. Copilot will analyze the failure and implement the fix" >> $GITHUB_STEP_SUMMARY
          echo "3. Once implemented, tests will validate the fix" >> $GITHUB_STEP_SUMMARY
          echo "4. If tests pass, the PR can be reviewed and merged" >> $GITHUB_STEP_SUMMARY
      
      - name: Add issue comment with Copilot mention
        if: steps.create_pr.outputs.pr_url != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ steps.create_pr.outputs.pr_number }}"
          
          # Add a comment mentioning Copilot to trigger the agent
          gh pr comment "$PR_NUMBER" --body "@copilot Please implement the workflow fix as described in the PR description. The failure analysis and fix proposal are available in the branch. Follow the instructions in \`.github/copilot-tasks/fix-workflow-failure.md\`."
          
          # Also update issue tracking
          ISSUE_TITLE="Workflow Failure: ${{ steps.get_run_details.outputs.workflow_name }}"
          
          # Check if issue already exists
          ISSUE_NUMBER=$(gh issue list --search "$ISSUE_TITLE" --state open --json number --jq '.[0].number' || echo "")
          
          if [ -z "$ISSUE_NUMBER" ]; then
            # Create new issue
            ISSUE_NUMBER=$(gh issue create \
              --title "$ISSUE_TITLE" \
              --body "Automated tracking issue for workflow failures in ${{ steps.get_run_details.outputs.workflow_name }}

          ## Recent Failures
          - Run [${{ steps.get_run_details.outputs.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ steps.get_run_details.outputs.run_id }})
          
          ## Auto-Healing
          A fix PR has been automatically created: ${{ steps.create_pr.outputs.pr_url }}" \
              --label "automated,workflow-failure" | grep -oP '\d+$')
          fi
          
          # Add comment about the fix PR with Copilot mention
          gh issue comment "$ISSUE_NUMBER" --body "🤖 **Auto-Healing PR Created**

          A pull request has been created and assigned to GitHub Copilot Agent:
          
          - **PR**: ${{ steps.create_pr.outputs.pr_url }}
          - **Failed Run**: https://github.com/${{ github.repository }}/actions/runs/${{ steps.get_run_details.outputs.run_id }}
          - **Branch**: \`${{ steps.generate_fix.outputs.fix_branch }}\`
          
          @copilot will automatically analyze and implement the fix. No manual intervention required unless the fix fails."
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: copilot-autofix-${{ steps.get_run_details.outputs.run_id }}
          path: |
            /tmp/workflow_logs/
            /tmp/failure_analysis.json
            /tmp/fix_proposal.json
            /tmp/pr_body.md
            .github/copilot-tasks/
          retention-days: 30
      
      - name: Report status
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Auto-Healing Status" >> $GITHUB_STEP_SUMMARY
          echo "- ⚙️ Run ID: ${{ steps.get_run_details.outputs.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Analysis: ${{ steps.analyze_failure.outputs.analysis_available }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 Fix Generated: ${{ steps.generate_fix.outputs.fix_available }}" >> $GITHUB_STEP_SUMMARY
          echo "- 💾 Branch Created: ${{ steps.create_branch.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🔀 PR Created: ${{ steps.create_pr.outputs.pr_url != '' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 Copilot Notified: ${{ steps.create_pr.outputs.pr_url != '' }}" >> $GITHUB_STEP_SUMMARY
