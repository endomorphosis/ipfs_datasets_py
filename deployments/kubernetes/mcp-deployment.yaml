apiVersion: v1
kind: Namespace
metadata:
  name: ipfs-datasets-mcp
  labels:
    name: ipfs-datasets-mcp
    purpose: mcp-server-dashboard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-config
  namespace: ipfs-datasets-mcp
data:
  config.yaml: |
    mcp_server:
      host: 0.0.0.0
      port: 8000
      workers: 4
      timeout: 30
      max_request_size: 10485760  # 10MB
      
    mcp_dashboard:
      host: 0.0.0.0
      port: 8080
      mcp_server_url: http://localhost:8000
      
    logging:
      level: INFO
      format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
      
    health:
      check_interval: 30
      timeout: 10
      retries: 3
---
apiVersion: v1
kind: Secret
metadata:
  name: mcp-secrets
  namespace: ipfs-datasets-mcp
type: Opaque
data:
  # Base64 encoded values - replace with actual secrets
  jwt-secret: bXktc2VjcmV0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==  # my-secret-key-change-in-production
  admin-password: YWRtaW4xMjM=  # admin123
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-server
  namespace: ipfs-datasets-mcp
  labels:
    app: mcp-server
    component: backend
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mcp-server
  template:
    metadata:
      labels:
        app: mcp-server
        component: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: mcp-server
        image: ipfs-datasets-mcp-standalone:latest
        imagePullPolicy: IfNotPresent
        command: ["python", "standalone_server.py", "--server-only"]
        env:
        - name: MCP_HOST
          value: "0.0.0.0"
        - name: MCP_PORT
          value: "8000"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: mcp-secrets
              key: jwt-secret
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
          successThreshold: 1
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: mcp-config
      - name: tmp-volume
        emptyDir:
          sizeLimit: 1Gi
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-server-service
  namespace: ipfs-datasets-mcp
  labels:
    app: mcp-server
    component: backend
spec:
  selector:
    app: mcp-server
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-dashboard
  namespace: ipfs-datasets-mcp
  labels:
    app: mcp-dashboard
    component: frontend
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mcp-dashboard
  template:
    metadata:
      labels:
        app: mcp-dashboard
        component: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: mcp-dashboard
        image: ipfs-datasets-mcp-standalone:latest
        imagePullPolicy: IfNotPresent
        command: ["python", "standalone_server.py", "--dashboard-only"]
        env:
        - name: DASHBOARD_HOST
          value: "0.0.0.0"
        - name: DASHBOARD_PORT
          value: "8080"
        - name: MCP_SERVER_URL
          value: "http://mcp-server-service:8000"
        - name: LOG_LEVEL
          value: "INFO"
        - name: PYTHONUNBUFFERED
          value: "1"
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 6
          successThreshold: 1
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: config-volume
        configMap:
          name: mcp-config
      - name: tmp-volume
        emptyDir:
          sizeLimit: 512Mi
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: mcp-dashboard-service
  namespace: ipfs-datasets-mcp
  labels:
    app: mcp-dashboard
    component: frontend
spec:
  selector:
    app: mcp-dashboard
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP
  sessionAffinity: None
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-server-hpa
  namespace: ipfs-datasets-mcp
  labels:
    app: mcp-server
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-server
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-dashboard-hpa
  namespace: ipfs-datasets-mcp
  labels:
    app: mcp-dashboard
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-dashboard
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Min
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mcp-server-pdb
  namespace: ipfs-datasets-mcp
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mcp-server
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mcp-dashboard-pdb
  namespace: ipfs-datasets-mcp
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: mcp-dashboard
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mcp-network-policy
  namespace: ipfs-datasets-mcp
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ipfs-datasets-mcp
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to:
    - namespaceSelector:
        matchLabels:
          name: ipfs-datasets-mcp
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 8080