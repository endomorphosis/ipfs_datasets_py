{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run MCP Tools Test",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"comprehensive_mcp_test.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Install Dependencies",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/pip",
			"args": [
				"install",
				"-r",
				"requirements.txt"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Individual MCP Tool",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.${input:toolCategory}.${input:toolName} import ${input:toolName}; result = asyncio.run(${input:toolName}(\"test\")); print(\"Result:\", result.get(\"status\", \"unknown\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start MCP Server",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_server",
				"--stdio"
			],
			"group": "build",
			"isBackground": true,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Dataset Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.dataset_tools.load_dataset import load_dataset; result = asyncio.run(load_dataset(\"test_dataset\")); print(\"Load Dataset Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test IPFS Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.ipfs_tools.get_from_ipfs import get_from_ipfs; result = asyncio.run(get_from_ipfs(\"QmTest123\")); print(\"IPFS Get Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Vector Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio, numpy as np; from ipfs_datasets_py.mcp_server.tools.vector_tools.create_vector_index import create_vector_index; vectors=[[0.1,0.2,0.3],[0.4,0.5,0.6]]; result = asyncio.run(create_vector_index(vectors, dimension=3, metric=\"cosine\", index_id=\"test_index\", index_name=\"Test Index\")); print(\"Vector Index Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Audit Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.audit_tools.generate_audit_report import generate_audit_report; result = asyncio.run(generate_audit_report(\"comprehensive\")); print(\"Audit Report Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start FastAPI Service",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"start_fastapi.py",
				"--env",
				"development",
				"--debug",
				"--reload"
			],
			"group": "build",
			"isBackground": true,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test FastAPI Service",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"test_fastapi_service.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Validate FastAPI",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"validate_fastapi.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Simple Integration Test",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"simple_test.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start MCP Dashboard",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_dashboard"
			],
			"isBackground": true,
			"problemMatcher": [],
			"group": "build"
		},
		{
			"label": "Start MCP Dashboard (8899)",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_dashboard"
			],
			"options": {
				"cwd": "${workspaceFolder}",
				"env": {
					"MCP_DASHBOARD_HOST": "127.0.0.1",
					"MCP_DASHBOARD_PORT": "8899",
					"MCP_DASHBOARD_BLOCKING": "1"
				}
			},
			"isBackground": true,
			"problemMatcher": [],
			"group": "build"
		},
		{
			"label": "Test MCP Dashboard Status",
			"type": "shell",
			"command": "curl",
			"args": [
				"-s",
				"http://127.0.0.1:8899/api/mcp/status"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test MCP Dashboard Status (raw)",
			"type": "shell",
			"command": "curl",
			"args": [
				"-sS",
				"http://127.0.0.1:8899/api/mcp/status"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Tests - Smoke",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"tests/integration/dashboard/run_mcp_dashboard_tests.py",
				"--mode",
				"smoke",
				"--verbose"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Tests - Comprehensive",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"tests/integration/dashboard/run_mcp_dashboard_tests.py",
				"--mode",
				"comprehensive",
				"--verbose"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Tests - Performance",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"tests/integration/dashboard/run_mcp_dashboard_tests.py",
				"--mode",
				"performance",
				"--verbose"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Tests - Docker",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"tests/integration/dashboard/run_mcp_dashboard_tests.py",
				"--mode",
				"comprehensive",
				"--docker",
				"--verbose"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start Docker MCP Services",
			"type": "shell",
			"command": "docker-compose",
			"args": [
				"-f",
				"docker-compose.mcp.yml",
				"up",
				"-d"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Stop Docker MCP Services",
			"type": "shell",
			"command": "docker-compose",
			"args": [
				"-f",
				"docker-compose.mcp.yml",
				"down"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Install Playwright Browsers",
			"type": "shell",
			"command": "playwright",
			"args": [
				"install",
				"chromium"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		}
		,
		{
			"label": "Start MCP Dashboard (8899)",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_dashboard"
			],
			"isBackground": true,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}",
				"env": {
					"MCP_DASHBOARD_HOST": "127.0.0.1",
					"MCP_DASHBOARD_PORT": "8899",
					"MCP_DASHBOARD_BLOCKING": "1"
				}
			},
			"group": "build"
		},
		{
			"label": "Test MCP Dashboard Status (raw)",
			"type": "shell",
			"command": "/bin/bash",
			"args": [
				"-lc",
				"curl -sS -o /dev/null -w \"HTTP %{http_code}\\n\" http://127.0.0.1:8899/api/mcp/status && curl -sS http://127.0.0.1:8899/api/mcp/status | head -c 300"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		},
		{
			"label": "Test MCP Dashboard Status",
			"type": "shell",
			"command": "/bin/bash",
			"args": [
				"-lc",
				"curl -sS http://127.0.0.1:8899/api/mcp/status | python - <<'PY'\nimport sys, json\ntry:\n    d = json.load(sys.stdin)\n    print(json.dumps({'status': d.get('status'), 'tools_available': d.get('tools_available')}))\nexcept Exception as e:\n    print(json.dumps({'error': str(e)}))\nPY"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		}
	],
	"inputs": [
		{
			"id": "toolCategory",
			"description": "Tool category",
			"default": "dataset_tools",
			"type": "pickString",
			"options": [
				"dataset_tools",
				"ipfs_tools",
				"vector_tools",
				"graph_tools",
				"audit_tools",
				"provenance_tools",
				"security_tools"
			]
		},
		{
			"id": "toolName",
			"description": "Tool name",
			"default": "load_dataset",
			"type": "promptString"
		}
	]
}