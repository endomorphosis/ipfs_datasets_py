{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run MCP Tools Test",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"comprehensive_mcp_test.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Install Dependencies",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/pip",
			"args": [
				"install",
				"-r",
				"requirements.txt"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Individual MCP Tool",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.${input:toolCategory}.${input:toolName} import ${input:toolName}; result = asyncio.run(${input:toolName}(\"test\")); print(\"Result:\", result.get(\"status\", \"unknown\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start MCP Server",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_server",
				"--stdio"
			],
			"group": "build",
			"isBackground": true,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Dataset Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.dataset_tools.load_dataset import load_dataset; result = asyncio.run(load_dataset(\"test_dataset\")); print(\"Load Dataset Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test IPFS Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.ipfs_tools.get_from_ipfs import get_from_ipfs; result = asyncio.run(get_from_ipfs(\"QmTest123\")); print(\"IPFS Get Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Vector Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio, numpy as np; from ipfs_datasets_py.mcp_server.tools.vector_tools.create_vector_index import create_vector_index; vectors=[[0.1,0.2,0.3],[0.4,0.5,0.6]]; result = asyncio.run(create_vector_index(vectors, dimension=3, metric=\"cosine\", index_id=\"test_index\", index_name=\"Test Index\")); print(\"Vector Index Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test Audit Tools",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-c",
				"import asyncio; from ipfs_datasets_py.mcp_server.tools.audit_tools.generate_audit_report import generate_audit_report; result = asyncio.run(generate_audit_report(\"comprehensive\")); print(\"Audit Report Result:\", result.get(\"status\"))"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start FastAPI Service",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"start_fastapi.py",
				"--env",
				"development",
				"--debug",
				"--reload"
			],
			"group": "build",
			"isBackground": true,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test FastAPI Service",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"test_fastapi_service.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Validate FastAPI",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"validate_fastapi.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Simple Integration Test",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"simple_test.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start MCP Dashboard",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_dashboard"
			],
			"isBackground": true,
			"problemMatcher": [],
			"group": "build"
		},
		{
			"label": "Start MCP Dashboard (8899)",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_dashboard"
			],
			"options": {
				"cwd": "${workspaceFolder}",
				"env": {
					"MCP_DASHBOARD_HOST": "127.0.0.1",
					"MCP_DASHBOARD_PORT": "8899",
					"MCP_DASHBOARD_BLOCKING": "1"
				}
			},
			"isBackground": true,
			"problemMatcher": [],
			"group": "build"
		},
		{
			"label": "Test MCP Dashboard Status",
			"type": "shell",
			"command": "curl",
			"args": [
				"-s",
				"http://127.0.0.1:8899/api/mcp/status"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test MCP Dashboard Status (raw)",
			"type": "shell",
			"command": "curl",
			"args": [
				{
					"version": "2.0.0",
					"tasks": [
						{
							"label": "Start MCP Dashboard (8899)",
							"type": "shell",
							"command": "${workspaceFolder}/.venv/bin/python",
							"args": ["-m", "ipfs_datasets_py.mcp_dashboard"],
							"options": {
								"cwd": "${workspaceFolder}",
								"env": {
									"MCP_DASHBOARD_HOST": "127.0.0.1",
									"MCP_DASHBOARD_PORT": "8899",
									"MCP_DASHBOARD_BLOCKING": "1"
								}
							},
							"isBackground": true,
							"group": "build",
							"problemMatcher": []
						},
						{
							"label": "Test MCP Dashboard Status",
							"type": "shell",
							"command": "/bin/bash",
							"args": ["-lc", "curl -sS http://127.0.0.1:8899/api/mcp/status | head -c 300 && echo"],
							"group": "test",
							"isBackground": false,
							"problemMatcher": []
						},

						{
							"label": "Start Caselaw Dashboard (5000)",
							"type": "shell",
							"command": "${workspaceFolder}/.venv/bin/python",
							"args": [
								"scripts/demo/demonstrate_caselaw_graphrag.py",
								"--run-dashboard",
								"--port",
								"5000"
							],
							"options": { "cwd": "${workspaceFolder}" },
							"isBackground": true,
							"group": "build",
							"problemMatcher": []
						},
						{
							"label": "Stop Caselaw Dashboard",
							"type": "shell",
							"command": "/bin/bash",
							"args": ["-lc", "pkill -f ipfs_datasets_py.caselaw_dashboard || true; fuser -k 5000/tcp || true"],
							"options": { "cwd": "${workspaceFolder}" },
							"group": "build",
							"isBackground": false,
							"problemMatcher": []
						},
						{
							"label": "Check Caselaw Dashboard Health",
							"type": "shell",
							"command": "/bin/bash",
							"args": [
								"-lc",
								"echo ROOT:; curl -sS -o /dev/null -w 'HTTP %{http_code}\\n' http://127.0.0.1:5000/; echo DOCTRINES:; curl -sS http://127.0.0.1:5000/api/legal-doctrines | head -c 200; echo; echo SEARCH:; curl -sS 'http://127.0.0.1:5000/api/search?q=civil%20rights&limit=2' | head -c 200; echo"
							],
							"options": { "cwd": "${workspaceFolder}" },
							"group": "test",
							"isBackground": false,
							"problemMatcher": []
						},

						{
							"label": "Start Docker MCP Services",
							"type": "shell",
							"command": "docker-compose",
							"args": ["-f", "docker-compose.mcp.yml", "up", "-d"],
							"options": { "cwd": "${workspaceFolder}" },
							"group": "build",
							"isBackground": false,
							"problemMatcher": []
						},
						{
							"label": "Stop Docker MCP Services",
							"type": "shell",
							"command": "docker-compose",
							"args": ["-f", "docker-compose.mcp.yml", "down"],
							"options": { "cwd": "${workspaceFolder}" },
							"group": "build",
							"isBackground": false,
							"problemMatcher": []
						}
					]
				}
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Tests - Comprehensive",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"tests/integration/dashboard/run_mcp_dashboard_tests.py",
				"--mode",
				"comprehensive",
				"--verbose"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Tests - Performance",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"tests/integration/dashboard/run_mcp_dashboard_tests.py",
				"--mode",
				"performance",
				"--verbose"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Tests - Docker",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"tests/integration/dashboard/run_mcp_dashboard_tests.py",
				"--mode",
				"comprehensive",
				"--docker",
				"--verbose"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start Docker MCP Services",
			"type": "shell",
			"command": "docker-compose",
			"args": [
				"-f",
				"docker-compose.mcp.yml",
				"up",
				"-d"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		},
		{
			"label": "Stop Docker MCP Services",
			"type": "shell",
			"command": "docker-compose",
			"args": [
				"-f",
				{
		
				"docker-compose.mcp.yml",
				"down"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Stop Caselaw Dashboard",
			"type": "shell",
			"command": "/bin/bash",
			"args": [
				"-lc",
				"pkill -f ipfs_datasets_py.caselaw_dashboard || true; fuser -k 5000/tcp || true"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		},
		{
			"label": "Check Caselaw Dashboard Health",
			"type": "shell",
			"command": "/bin/bash",
			"args": [
				"-lc",
				"echo ROOT:; curl -sS -o /dev/null -w 'HTTP %{http_code}\\n' http://127.0.0.1:5000/; echo DOCTRINES:; curl -sS http://127.0.0.1:5000/api/legal-doctrines | head -c 200; echo; echo SEARCH:; curl -sS 'http://127.0.0.1:5000/api/search?q=civil%20rights&limit=2' | head -c 200; echo"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		},
		{
			"label": "Install Playwright Browsers",
			"type": "shell",
			"command": "playwright",
			"args": [
				"install",
				"chromium"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test IPFS Datasets CLI",
			"type": "shell",
			"command": "./ipfs-datasets",
			"args": [
				"info",
				"status"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "List IPFS Datasets CLI Tools",
			"type": "shell",
			"command": "./ipfs-datasets",
			"args": [
				"info",
				"list-tools"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "IPFS Datasets CLI Help",
			"type": "shell",
			"command": "./ipfs-datasets",
			"args": [
				"--help"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Test IPFS Datasets CLI Suite",
			"type": "shell",
			"command": "python",
			"args": [
				"test_cli.py"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Start MCP Dashboard (8899)",
			"type": "shell",
			"command": "${workspaceFolder}/.venv/bin/python",
			"args": [
				"-m",
				"ipfs_datasets_py.mcp_dashboard"
			],
			"isBackground": true,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}",
				"env": {
					"MCP_DASHBOARD_HOST": "127.0.0.1",
					"MCP_DASHBOARD_PORT": "8899",
					"MCP_DASHBOARD_BLOCKING": "1"
				}
			},
			"group": "build"
		},
		{
			"label": "Test MCP Dashboard Status (raw)",
			"type": "shell",
			"command": "/bin/bash",
			"args": [
				"-lc",
				"curl -sS -o /dev/null -w \"HTTP %{http_code}\\n\" http://127.0.0.1:8899/api/mcp/status && curl -sS http://127.0.0.1:8899/api/mcp/status | head -c 300"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Test MCP Dashboard Status",
			"type": "shell",
			"command": "/bin/bash",
			"args": [
				"-lc",
				"curl -sS http://127.0.0.1:8899/api/mcp/status | python - <<'PY'\nimport sys, json\ntry:\n    d = json.load(sys.stdin)\n    print(json.dumps({'status': d.get('status'), 'tools_available': d.get('tools_available')}))\nexcept Exception as e:\n    print(json.dumps({'error': str(e)}))\nPY"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Stop MCP Dashboard",
			"type": "shell",
			"command": "pkill",
			"args": [
				"-f",
				"ipfs_datasets_py.mcp_dashboard"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP CLI Tool",
			"type": "shell",
			"command": "python",
			"args": [
				"mcp_cli.py",
				"${input:mcp_category}",
				"${input:mcp_tool}",
				"${input:mcp_args}"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "List MCP CLI Categories",
			"type": "shell",
			"command": "python",
			"args": [
				"mcp_cli.py",
				"--list-categories"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Run MCP Dashboard Playwright Tests",
			"type": "shell",
			"command": "python",
			"args": [
				"mcp_dashboard_tests.py",
				"--headless",
				"--output",
				"test_results.json"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start Docker MCP Server",
			"type": "shell",
			"command": "docker",
			"args": [
				"run",
				"-d",
				"--name",
				"mcp-server",
				"-p",
				"8000:8000",
				"-v",
				"${workspaceFolder}:/app",
				"ipfs-datasets-mcp"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Stop Docker MCP Server",
			"type": "shell",
			"command": "docker",
			"args": [
				"stop",
				"mcp-server",
				"&&",
				"docker",
				"rm",
				"mcp-server"
			],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": {
				"cwd": "${workspaceFolder}"
			}
		},
		{
			"label": "Start Caselaw Dashboard (5000)",
			"type": "shell",
			"command": "/home/barberb/ipfs_datasets_py/.venv/bin/python",
			"args": [
				"scripts/run_caselaw_dashboard.py",
				"--host",
				"0.0.0.0",
				"--port",
				"5000",
				"--max-samples",
				"100"
			],
			"isBackground": true,
			"options": {
				"cwd": "${workspaceFolder}",
				"env": { "PYTHONPATH": "${workspaceFolder}", "CASELAW_CACHE_DIR": "/storage/teraflopai" }
			},
			"group": "build"
		}
		,
		{
			"label": "Start Caselaw Dashboard (5000) [teraflop]",
			"type": "shell",
			"command": "/home/barberb/ipfs_datasets_py/.venv/bin/python",
			"args": [
				"scripts/run_caselaw_dashboard.py",
				"--host","0.0.0.0","--port","5000","--max-samples","100"
			],
			"options": {
				"cwd": "${workspaceFolder}",
				"env": { "PYTHONPATH": "${workspaceFolder}", "CASELAW_CACHE_DIR": "/storage/teraflopai" }
			},
			"isBackground": true,
			"group": "build",
			"problemMatcher": []
		},
		{
			"label": "Stop Caselaw Dashboard (Stable)",
			"type": "shell",
			"command": "/bin/bash",
			"args": ["-lc", "pkill -f scripts/run_caselaw_dashboard.py || true; fuser -k 5000/tcp || true"],
			"group": "build",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		},
		{
			"label": "Wait For Caselaw 200 (Stable)",
			"type": "shell",
			"command": "/bin/bash",
			"args": ["-lc", "for i in {1..60}; do code=$(curl -sS -o /dev/null -w '%{http_code}' http://127.0.0.1:5000/ || true); if [ \"$code\" = \"200\" ]; then echo Ready; exit 0; fi; sleep 1; done; echo Timeout waiting for 200; exit 1"],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		},
		{
			"label": "Check Caselaw Doctrines (Stable)",
			"type": "shell",
			"command": "/bin/bash",
			"args": ["-lc", "echo DOCTRINES:; curl -sS http://127.0.0.1:5000/api/doctrines | head -c 200; echo; echo LEGAL-DOCTRINES:; curl -sS http://127.0.0.1:5000/api/legal-doctrines | head -c 200; echo"],
			"group": "test",
			"isBackground": false,
			"problemMatcher": [],
			"options": { "cwd": "${workspaceFolder}" }
		},
		{
			"label": "Start + Verify Caselaw Dashboard (Stable)",
			"type": "shell",
			"command": "/bin/true",
			"dependsOrder": "sequence",
			"dependsOn": [
				"Stop Caselaw Dashboard (Stable)",
				"Start Caselaw Dashboard (5000)",
				"Wait For Caselaw 200 (Stable)",
				"Check Caselaw Doctrines (Stable)"
			],
			"group": "build",
			"problemMatcher": []
		}
		{
			"label": "Wait For Caselaw 200",
			"type": "shell",
			"command": "/bin/bash",
			"args": [
				"-lc",
				"for i in {1..60}; do code=$(curl -sS -o /dev/null -w '%{http_code}' http://127.0.0.1:5000/ || true); if [ \"$code\" = \"200\" ]; then echo Ready; exit 0; fi; sleep 1; done; echo Timeout waiting for 200; exit 1"
			],
			"group": "test",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Open Caselaw Dashboard",
			"type": "shell",
			"command": "/bin/bash",
			"args": ["-lc", "xdg-open http://127.0.0.1:5000 >/dev/null 2>&1 || true; echo Opened http://127.0.0.1:5000"],
			"group": "test",
			"isBackground": false,
			"problemMatcher": []
		},
		{
			"label": "Start + Verify Caselaw Dashboard",
			"type": "shell",
			"command": "/bin/true",
			"dependsOrder": "sequence",
			"dependsOn": [
				"Stop Caselaw Dashboard",
				"Start Caselaw Dashboard (5000) [teraflop]",
				"Wait For Caselaw 200",
				"Check Caselaw Dashboard Health",
				"Open Caselaw Dashboard"
			],
			"group": "build",
			"problemMatcher": []
		}
	],
	"inputs": [
		{
			"id": "toolCategory",
			"description": "Tool category",
			"default": "dataset_tools",
			"type": "pickString",
			"options": [
				"dataset_tools",
				"ipfs_tools",
				"vector_tools",
				"graph_tools",
				"audit_tools",
				"provenance_tools",
				"security_tools"
			]
		},
		{
			"id": "toolName",
			"description": "Tool name",
			"default": "load_dataset",
			"type": "promptString"
		},
		{
			"id": "mcp_category",
			"description": "MCP Tool Category",
			"default": "dataset_tools",
			"type": "pickString",
			"options": [
				"dataset_tools",
				"ipfs_tools",
				"vector_tools",
				"graph_tools",
				"audit_tools",
				"analysis_tools",
				"embedding_tools",
				"media_tools",
				"admin_tools"
			]
		},
		{
			"id": "mcp_tool",
			"description": "MCP Tool Name",
			"default": "load_dataset",
			"type": "promptString"
		},
		{
			"id": "mcp_args",
			"description": "MCP Tool Arguments (--key value format)",
			"default": "--source test --format json",
			"type": "promptString"
		}
	]
}