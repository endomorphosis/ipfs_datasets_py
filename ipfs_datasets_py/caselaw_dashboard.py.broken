"""
Caselaw Access Project GraphRAG Dashboard

This module provides a web-based dashboard for searching and exploring
the Caselaw Access Project dataset using GraphRAG capabilities.
"""

import os
import json
import logging
import asyncio
import requests
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path
from collections import defaultdict

try:
    from flask import Flask, render_template, request, jsonify, send_from_directory
    FLASK_AVAILABLE = True
except ImportError:
    FLASK_AVAILABLE = False

try:
    import plotly.graph_objects as go
    import plotly.express as px
    from plotly.subplots import make_subplots
    import plotly.utils
    PLOTLY_AVAILABLE = True
except ImportError:
    PLOTLY_AVAILABLE = False

try:
    import numpy as np
    NUMPY_AVAILABLE = True
except ImportError:
    NUMPY_AVAILABLE = False

from .caselaw_graphrag import CaselawGraphRAGProcessor

logger = logging.getLogger(__name__)


class CaselawDashboard:
    """Web dashboard for Caselaw Access Project GraphRAG search"""
    
    def __init__(self, cache_dir: Optional[str] = None, debug: bool = False):
        self.cache_dir = cache_dir
        self.debug = debug
        self.processor = CaselawGraphRAGProcessor(cache_dir=cache_dir)
        self.app = None
        self.processed_data = None
        
        if FLASK_AVAILABLE:
            self.app = Flask(__name__, 
                           template_folder=self._get_template_dir(),
                           static_folder=self._get_static_dir())
            self._setup_routes()
    
    def _get_template_dir(self) -> str:
        """Get templates directory"""
        current_dir = Path(__file__).parent
        template_dir = current_dir / "templates" / "caselaw"
        template_dir.mkdir(parents=True, exist_ok=True)
        return str(template_dir)
    
    def _get_static_dir(self) -> str:
        """Get static files directory"""
        current_dir = Path(__file__).parent
        static_dir = current_dir / "static" / "caselaw"
        static_dir.mkdir(parents=True, exist_ok=True)
        return str(static_dir)
    
    def initialize_data(self, max_samples: Optional[int] = None) -> Dict[str, Any]:
        """Initialize the dashboard with processed caselaw data"""
        logger.info("Initializing caselaw data for dashboard...")
        
        try:
            self.processed_data = self.processor.process_dataset(max_samples=max_samples)
            return {
                'status': 'success',
                'message': f"Loaded {self.processed_data['dataset_info']['count']} cases",
                'data': self.processed_data
            }
        except Exception as e:
            logger.error(f"Failed to initialize data: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }
    
    def _setup_routes(self):
        """Setup Flask routes"""
        
        @self.app.route('/')
        def index():
            """Main dashboard page"""
            return self._render_dashboard()
        
        @self.app.route('/api/search')
        def search():
            """Search endpoint"""
            query = request.args.get('q', '')
            max_results = int(request.args.get('limit', 10))
            
            if not self.processed_data:
                return jsonify({
                    'status': 'error',
                    'message': 'Data not initialized'
                })
            
            try:
                results = self.processor.query_knowledge_graph(query, max_results)
                return jsonify({
                    'status': 'success',
                    'query': query,
                    'results': results,
                    'count': len(results)
                })
            except Exception as e:
                return jsonify({
                    'status': 'error',
                    'message': str(e)
                })
        
        @self.app.route('/case/<case_id>')
        def case_detail_page(case_id):
            """Case detail page with sidebar for legal issues and shepherding links"""
            return self._render_case_detail_page(case_id)

        @self.app.route('/api/case/<case_id>')
        def case_details(case_id):
            """Get detailed information about a specific case"""
            if not self.processed_data:
                return jsonify({
                    'status': 'error',
                    'message': 'Data not initialized'
                })
            
            try:
                # Get comprehensive case relationships
                relationships = self.processor.get_case_relationships(case_id)
                
                return jsonify(relationships)
            except Exception as e:
                return jsonify({
                    'status': 'error',
                    'message': str(e)
                })
        
        @self.app.route('/api/statistics')
        def statistics():
            """Get dataset statistics"""
            if not self.processed_data:
                return jsonify({
                    'status': 'error',
                    'message': 'Data not initialized'
                })
            
            return jsonify({
                'status': 'success',
                'statistics': self.processed_data['knowledge_graph']['statistics']
            })
        
        @self.app.route('/api/visualizations')
        def visualizations():
            """Generate visualization data"""
            if not self.processed_data:
                return jsonify({
                    'status': 'error',
                    'message': 'Data not initialized'
                })
            
            try:
                viz_data = self._generate_visualizations()
                return jsonify({
                    'status': 'success',
                    'visualizations': viz_data
                })
            except Exception as e:
                return jsonify({
                    'status': 'error',
                    'message': str(e)
                })

        @self.app.route('/api/temporal-deontic/<doctrine>')
        def temporal_deontic_analysis(doctrine):
            """Get temporal deontic logic analysis for a doctrine"""
            if not self.processed_data:
                return jsonify({
                    'status': 'error',
                    'message': 'Data not initialized'
                })
            
            try:
                # Get cases related to the doctrine
                related_cases = self._get_doctrine_cases(doctrine)
                
                if not related_cases:
                    return jsonify({
                        'status': 'error',
                        'message': f'No cases found for doctrine: {doctrine}'
                    })
                
                # Process through temporal deontic logic
                from .temporal_deontic_caselaw_processor import TemporalDeonticCaselawProcessor
                temporal_processor = TemporalDeonticCaselawProcessor()
                
                # Run the analysis asynchronously
                import asyncio
                result = asyncio.run(temporal_processor.process_caselaw_lineage(related_cases, doctrine))
                
                return jsonify({
                    'status': 'success',
                    'doctrine': doctrine,
                    'temporal_deontic_analysis': result
                })
                
            except Exception as e:
                logger.error(f"Temporal deontic analysis failed for {doctrine}: {e}")
                return jsonify({
                    'status': 'error',
                    'message': str(e)
                })

        @self.app.route('/api/legal-doctrines')
        def legal_doctrines():
            """Get all legal doctrines with case counts and clustering data"""
            if not self.processed_data:
                return jsonify({
                    'status': 'error',
                    'message': 'Data not initialized'
                })
            
            try:
                doctrines_data = self._get_legal_doctrines_with_clustering()
                # Return the data structure directly with status
                result = {
                    'status': 'success',
                    **doctrines_data  # Unpack the doctrines data (doctrines, clusters, etc.)
                }
                return jsonify(result)
            except Exception as e:
                return jsonify({
                    'status': 'error',
                    'message': str(e)
                })

        @self.app.route('/api/legal-doctrines/search')
        def search_doctrines():
            """Search and filter legal doctrines with dynamic clustering"""
            query = request.args.get('q', '').lower()
            if not self.processed_data:
                return jsonify({
                    'status': 'error',
                    'message': 'Data not initialized'
                })
            
            try:
                filtered_doctrines = self._search_and_cluster_doctrines(query)
                # Return the data structure directly with status
                result = {
                    'status': 'success',
                    **filtered_doctrines  # Unpack the filtered doctrines data
                }
                return jsonify(result)
            except Exception as e:
                return jsonify({
                    'status': 'error',
                    'message': str(e)
                })

        @self.app.route('/doctrine/<doctrine_name>')
        def doctrine_page(doctrine_name):
            """Individual doctrine page showing case shepherding lineage"""
            return self._render_doctrine_page(doctrine_name)
        
        @self.app.route('/api/initialize', methods=['POST'])
        def initialize():
            """Initialize the dashboard with data"""
            try:
                result = self.initialize_data(max_samples=100)
                return jsonify(result)
            except Exception as e:
                return jsonify({
                    'status': 'error',
                    'message': str(e)
                })
    
    def _render_dashboard(self) -> str:
        """Render the main dashboard HTML"""
        if not self.processed_data:
            return self._render_initialization_page()
        
        # Create dashboard HTML
        html_content = self._create_dashboard_html()
        return html_content
    
    def _render_initialization_page(self) -> str:
        """Render initialization page when data is not loaded"""
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>Caselaw Access Project - GraphRAG Dashboard</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .header { text-align: center; margin-bottom: 40px; }
                .init-button { background: #007bff; color: white; padding: 12px 24px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; }
                .init-button:hover { background: #0056b3; }
                .loading { display: none; text-align: center; margin-top: 20px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🏛️ Caselaw Access Project</h1>
                    <h2>GraphRAG Dashboard</h2>
                    <p>Search and explore legal cases using advanced knowledge graph technology</p>
                </div>
                
                <div style="text-align: center;">
                    <button class="init-button" onclick="initializeData()">Initialize Dataset</button>
                    <div class="loading" id="loading">
                        <p>Loading dataset and building knowledge graph...</p>
                        <p>This may take a few moments.</p>
                    </div>
                </div>
            </div>
            
            <script>
                function initializeData() {
                    document.querySelector('.init-button').style.display = 'none';
                    document.getElementById('loading').style.display = 'block';
                    
                    fetch('/api/initialize', { method: 'POST' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.status === 'success') {
                                window.location.reload();
                            } else {
                                alert('Failed to initialize: ' + data.message);
                                document.querySelector('.init-button').style.display = 'block';
                                document.getElementById('loading').style.display = 'none';
                            }
                        })
                        .catch(error => {
                            alert('Error: ' + error);
                            document.querySelector('.init-button').style.display = 'block';
                            document.getElementById('loading').style.display = 'none';
                        });
                }
            </script>
        </body>
        </html>
        """
    
    def _create_dashboard_html(self) -> str:
        """Create the main dashboard HTML"""
        stats = self.processed_data['knowledge_graph']['statistics']
        
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Caselaw Access Project - Legal Research Platform</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- Professional Legal Research Platform Styles -->
            <style>
                /* Reset and base styles */
                * {{ box-sizing: border-box; margin: 0; padding: 0; }}
                
                body {{ 
                    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
                    margin: 0; padding: 0; background: #f8fafc; color: #1e293b; line-height: 1.6;
                    font-size: 14px;
                }}
                
                /* Professional header */
                .header {{ 
                    background: #1e293b; color: white; padding: 20px 0; border-bottom: 3px solid #0f172a;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                }}
                
                .header .container {{
                    display: flex; justify-content: space-between; align-items: center;
                    max-width: 1400px; margin: 0 auto; padding: 0 24px;
                }}
                
                .header h1 {{ 
                    font-size: 1.75rem; font-weight: 600; margin: 0;
                    display: flex; align-items: center; gap: 12px;
                }}
                
                .header .legal-badge {{
                    background: #dc2626; color: white; padding: 4px 8px;
                    border-radius: 4px; font-size: 0.75rem; font-weight: 500;
                    text-transform: uppercase; letter-spacing: 0.5px;
                }}
                
                .header .user-info {{
                    display: flex; align-items: center; gap: 16px; font-size: 0.875rem;
                }}
                
                .container {{ max-width: 1400px; margin: 0 auto; padding: 24px; }}
                
                /* Professional metrics grid */
                .metrics-grid {{ 
                    display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
                    gap: 20px; margin-bottom: 32px;
                }}
                
                .metric-card {{ 
                    background: white; border: 1px solid #e2e8f0; border-radius: 8px;
                    padding: 24px; transition: all 0.2s ease;
                }}
                
                .metric-card:hover {{ 
                    border-color: #3b82f6; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.1);
                }}
                
                .metric-header {{
                    display: flex; justify-content: space-between; align-items: flex-start;
                    margin-bottom: 16px;
                }}
                
                .metric-title {{
                    font-size: 0.875rem; font-weight: 500; color: #64748b;
                    text-transform: uppercase; letter-spacing: 0.5px;
                }}
                
                .metric-icon {{
                    width: 32px; height: 32px; background: #f1f5f9; border-radius: 6px;
                    display: flex; align-items: center; justify-content: center;
                    font-size: 14px; color: #475569;
                }}
                
                .metric-value {{
                    font-size: 2.5rem; font-weight: 700; color: #0f172a; margin-bottom: 8px;
                }}
                
                .metric-change {{
                    font-size: 0.75rem; color: #059669; font-weight: 500;
                }}
                
                /* Professional navigation */
                .nav-tabs {{
                    background: white; border: 1px solid #e2e8f0; border-radius: 8px;
                    margin-bottom: 24px; overflow: hidden;
                }}
                
                .nav-tabs-list {{
                    display: flex; border-bottom: 1px solid #e2e8f0;
                }}
                
                .nav-tab {{
                    flex: 1; padding: 16px 20px; border: none; background: none;
                    font-size: 0.875rem; font-weight: 500; color: #64748b; cursor: pointer;
                    border-bottom: 2px solid transparent; transition: all 0.2s ease;
                }}
                
                .nav-tab.active {{
                    color: #3b82f6; border-bottom-color: #3b82f6; background: #f8fafc;
                }}
                
                .nav-tab:hover:not(.active) {{
                    color: #1e293b; background: #f8fafc;
                }}
                
                .tab-content {{
                    display: none; padding: 24px;
                }}
                
                .tab-content.active {{
                    display: block;
                }}
                
                /* Professional search interface */
                .search-section {{
                    background: white; border: 1px solid #e2e8f0; border-radius: 8px;
                    padding: 24px; margin-bottom: 24px;
                }}
                
                .search-header {{
                    margin-bottom: 20px;
                }}
                
                .search-header h2 {{
                    font-size: 1.25rem; font-weight: 600; color: #0f172a; margin-bottom: 8px;
                }}
                
                .search-header p {{
                    color: #64748b; font-size: 0.875rem;
                }}
                
                .search-form {{
                    display: flex; gap: 12px; margin-bottom: 20px;
                }}
                
                .search-input {{
                    flex: 1; padding: 12px 16px; border: 1px solid #d1d5db; border-radius: 6px;
                    font-size: 0.875rem; transition: border-color 0.2s ease;
                    outline: none;
                }}
                
                .search-input:focus {{
                    border-color: #3b82f6; box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
                }}
                
                .search-button {{
                    padding: 12px 24px; background: #3b82f6; color: white; border: none;
                    border-radius: 6px; font-size: 0.875rem; font-weight: 500;
                    cursor: pointer; transition: background-color 0.2s ease;
                }}
                
                .search-button:hover {{
                    background: #2563eb;
                }}
                
                .search-filters {{
                    display: flex; gap: 12px; flex-wrap: wrap;
                }}
                
                .filter-chip {{
                    background: #f1f5f9; color: #475569; padding: 6px 12px; border-radius: 16px;
                    font-size: 0.75rem; font-weight: 500; cursor: pointer;
                    border: 1px solid transparent; transition: all 0.2s ease;
                }}
                
                .filter-chip:hover {{
                    background: #e2e8f0; border-color: #cbd5e1;
                }}
                
                .filter-chip.active {{
                    background: #3b82f6; color: white;
                }}
                
                /* Professional results */
                .results-section {{
                    background: white; border: 1px solid #e2e8f0; border-radius: 8px;
                }}
                
                .results-header {{
                    padding: 20px 24px; border-bottom: 1px solid #e2e8f0;
                    display: flex; justify-content: space-between; align-items: center;
                }}
                
                .results-title {{
                    font-size: 1.125rem; font-weight: 600; color: #0f172a;
                }}
                
                .results-count {{
                    font-size: 0.875rem; color: #64748b;
                }}
                
                .case-result {{
                    padding: 20px 24px; border-bottom: 1px solid #f1f5f9;
                    transition: background-color 0.2s ease; cursor: pointer;
                }}
                
                .case-result:last-child {{
                    border-bottom: none;
                }}
                
                .case-result:hover {{
                    background: #f8fafc;
                }}
                
                .case-title {{
                    font-weight: 600; color: #0f172a; margin-bottom: 8px;
                    font-size: 1rem; line-height: 1.4;
                }}
                
                .case-citation {{
                    font-family: 'JetBrains Mono', 'Fira Code', monospace; font-size: 0.8125rem;
                    color: #dc2626; background: #fef2f2; padding: 4px 8px; border-radius: 4px;
                    display: inline-block; margin-bottom: 12px; border-left: 3px solid #dc2626;
                }}
                
                .case-summary {{
                    color: #475569; font-size: 0.875rem; line-height: 1.5;
                    margin-bottom: 12px;
                }}
                
                .case-meta {{
                    display: flex; gap: 16px; font-size: 0.75rem; color: #64748b;
                    text-transform: uppercase; letter-spacing: 0.5px; font-weight: 500;
                }}
                
                .meta-item {{
                    display: flex; align-items: center; gap: 4px;
                }}
                
                /* Loading and empty states */
                .loading {{
                    display: none; text-align: center; padding: 60px; color: #64748b;
                }}
                
                .loading-spinner {{
                    width: 24px; height: 24px; border: 2px solid #f1f5f9;
                    border-top: 2px solid #3b82f6; border-radius: 50%;
                    animation: spin 1s linear infinite; margin: 0 auto 16px;
                }}
                
                @keyframes spin {{ 0% {{ transform: rotate(0deg); }} 100% {{ transform: rotate(360deg); }} }}
                
                .no-results {{
                    text-align: center; padding: 60px; color: #64748b;
                    background: #f8fafc; border-radius: 8px; margin: 24px 0;
                }}
                
                /* Professional footer */
                .footer {{
                    background: #f1f5f9; border-top: 1px solid #e2e8f0; 
                    padding: 24px; text-align: center; margin-top: 48px;
                }}
                
                .footer-text {{
                    font-size: 0.75rem; color: #64748b;
                }}
                
                /* Responsive design */
                @media (max-width: 768px) {{
                    .container {{ padding: 16px; }}
                    .metrics-grid {{ grid-template-columns: 1fr; }}
                    .search-form {{ flex-direction: column; }}
                    .search-filters {{ justify-content: center; }}
                    .nav-tabs-list {{ flex-wrap: wrap; }}
                    .nav-tab {{ flex: none; min-width: 120px; }}
                    .case-meta {{ flex-direction: column; align-items: flex-start; gap: 8px; }}
                    .header .container {{ flex-direction: column; gap: 12px; text-align: center; }}
            </style>
        </head>
        <body>
            <!-- Professional Legal Research Platform Header -->
            <div class="header">
                <div class="container">
                    <h1>
                        ⚖️ Caselaw Access Project
                        <span class="legal-badge">Legal Research</span>
                    </h1>
                    <div class="user-info">
                        <span>Legal Research Platform</span>
                        <span>•</span>
                        <span>{stats['total_nodes']} Total Resources</span>
                    </div>
                </div>
            </div>
            
            <!-- Main Container -->
            <div class="container">
                <!-- Key Metrics -->
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-header">
                            <div>
                                <div class="metric-title">Legal Cases</div>
                                <div class="metric-value">{stats.get('case_nodes', 100)}</div>
                                <div class="metric-change">+{len(self.processed_data.get('cases', []))} available</div>
                            </div>
                            <div class="metric-icon">⚖️</div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-header">
                            <div>
                                <div class="metric-title">Knowledge Entities</div>
                                <div class="metric-value">{stats.get('total_nodes', 130)}</div>
                                <div class="metric-change">Linked resources</div>
                            </div>
                            <div class="metric-icon">🏛️</div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-header">
                            <div>
                                <div class="metric-title">Legal Relationships</div>
                                <div class="metric-value">{stats.get('total_edges', 764)}</div>
                                <div class="metric-change">Precedent connections</div>
                            </div>
                            <div class="metric-icon">🔗</div>
                        </div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-header">
                            <div>
                                <div class="metric-title">Temporal Coverage</div>
                                <div class="metric-value">{stats.get('year_range', {}).get('span', 220)}</div>
                                <div class="metric-change">Years of jurisprudence</div>
                            </div>
                            <div class="metric-icon">📅</div>
                        </div>
                    </div>
                </div>
                
                <!-- Professional Navigation Tabs -->
                <div class="nav-tabs">
                    <div class="nav-tabs-list">
                        <button class="nav-tab active" onclick="showTab('search')">Case Search</button>
                        <button class="nav-tab" onclick="showTab('doctrines')">Legal Doctrines</button>
                        <button class="nav-tab" onclick="showTab('temporal')">Temporal Analysis</button>
                        <button class="nav-tab" onclick="showTab('analytics')">Analytics</button>
                    </div>
                    
                    <!-- Case Search Tab -->
                    <div id="search-tab" class="tab-content active">
                        <div class="search-section">
                            <div class="search-header">
                                <h2>Legal Case Research</h2>
                                <p>Search through comprehensive caselaw database using advanced GraphRAG technology for legal precedent analysis</p>
                            </div>
                            <div class="search-form">
                                <input type="text" class="search-input" id="searchQuery" placeholder="Enter case name, citation, legal doctrine, or search terms..." />
                                <button class="search-button" onclick="performSearch()">Search Cases</button>
                            </div>
                            <div class="search-filters">
                                <div class="filter-chip" onclick="setSearchQuery('civil rights')">Civil Rights</div>
                                <div class="filter-chip" onclick="setSearchQuery('Supreme Court')">Supreme Court</div>
                                <div class="filter-chip" onclick="setSearchQuery('constitutional law')">Constitutional Law</div>
                                <div class="filter-chip" onclick="setSearchQuery('criminal procedure')">Criminal Procedure</div>
                                <div class="filter-chip" onclick="setSearchQuery('qualified immunity')">Qualified Immunity</div>
                                <div class="filter-chip" onclick="setSearchQuery('due process')">Due Process</div>
                            </div>
                        </div>
                        
                        <!-- Search Results -->
                        <div class="results-section" id="searchResults" style="display: none;">
                            <div class="results-header">
                                <div class="results-title">Search Results</div>
                                <div class="results-count" id="resultsCount">0 cases found</div>
                            </div>
                            <div id="casesList"></div>
                        </div>
                        
                        <!-- Loading State -->
                        <div class="loading" id="searchLoading">
                            <div class="loading-spinner"></div>
                            <div>Searching legal database...</div>
                        </div>
                        
                        <!-- No Results State -->
                        <div class="no-results" id="noResults" style="display: none;">
                            <h3>No cases found</h3>
                            <p>Try adjusting your search terms or using the suggested filters above.</p>
                        </div>
                    </div>
                    
                    <!-- Legal Doctrines Tab -->
                    <div id="doctrines-tab" class="tab-content">
                        <div class="search-section">
                            <div class="search-header">
                                <h2>Legal Doctrines Explorer</h2>
                                <p>Explore legal doctrines through intelligent clustering and case relationship analysis</p>
                            </div>
                            <div class="search-form">
                                <input type="text" class="search-input" id="doctrineSearch" placeholder="Filter legal doctrines..." onkeyup="filterDoctrines()" />
                            </div>
                            <div id="doctrineCloud" class="tag-cloud">
                                <!-- Doctrine cloud will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- Temporal Analysis Tab -->
                    <div id="temporal-tab" class="tab-content">
                        <div class="search-section">
                            <div class="search-header">
                                <h2>Temporal Deontic Logic Analysis</h2>
                                <p>Convert legal precedents into formal temporal deontic logic and analyze chronological consistency</p>
                            </div>
                            <div class="search-form">
                                <select class="search-input" id="doctrineSelect">
                                    <option value="">Select a legal doctrine...</option>
                                    <option value="qualified immunity">Qualified Immunity</option>
                                    <option value="civil rights">Civil Rights</option>
                                    <option value="due process">Due Process</option>
                                    <option value="constitutional law">Constitutional Law</option>
                                </select>
                                <button class="search-button" onclick="analyzeTemporalLogic()">Analyze Logic</button>
                            </div>
                            <div id="temporalResults" class="results-section" style="display: none;">
                                <!-- Temporal logic results will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                    
                    <!-- Analytics Tab -->
                    <div id="analytics-tab" class="tab-content">
                        <div class="search-section">
                            <div class="search-header">
                                <h2>Dataset Analytics & Visualizations</h2>
                                <p>Statistical analysis and visual insights into the legal knowledge graph</p>
                            </div>
                            <div id="analyticsContent">
                                <!-- Analytics content will be loaded here -->
                                <div class="metric-card">
                                    <h3>Court Distribution</h3>
                                    <div class="court-stats">
                                        {self._generate_court_stats_html()}
                                    </div>
                                </div>
                                <div class="metric-card">
                                    <h3>Legal Topic Distribution</h3>
                                    <div class="topic-stats">
                                        {self._generate_topic_stats_html()}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            
            <script>
                // Professional JavaScript functionality for legal research platform
                
                // Tab management
                function showTab(tabName) {
                    // Hide all tabs
                    document.querySelectorAll('.tab-content').forEach(tab => {
                        tab.classList.remove('active');
                    });
                    document.querySelectorAll('.nav-tab').forEach(tab => {
                        tab.classList.remove('active');
                    });
                    
                    // Show selected tab
                    document.getElementById(tabName + '-tab').classList.add('active');
                    event.target.classList.add('active');
                    
                    // Load tab-specific content
                    if (tabName === 'doctrines') {
                        loadDoctrines();
                    } else if (tabName === 'analytics') {
                        loadAnalytics();
                    }
                }
                
                // Search functionality
                function performSearch() {
                    const query = document.getElementById('searchQuery').value.trim();
                    if (!query) return;
                    
                    showLoading();
                    hideResults();
                    
                    fetch(`/api/search?q=${encodeURIComponent(query)}&limit=10`)
                        .then(response => response.json())
                        .then(data => {
                            hideLoading();
                            displayResults(data);
                        })
                        .catch(error => {
                            hideLoading();
                            showError('Search failed: ' + error.message);
                        });
                }
                
                function setSearchQuery(query) {
                    document.getElementById('searchQuery').value = query;
                    performSearch();
                }
                
                function displayResults(data) {
                    const resultsDiv = document.getElementById('searchResults');
                    const countDiv = document.getElementById('resultsCount');
                    const listDiv = document.getElementById('casesList');
                    
                    if (data.results && data.results.length > 0) {
                        countDiv.textContent = `${data.results.length} cases found for "${data.query}"`;
                        
                        const casesHTML = data.results.map(case => `
                            <div class="case-result" onclick="viewCase('${case.id}')">
                                <div class="case-title">${case.title || case.name}</div>
                                <div class="case-citation">${case.citation}</div>
                                <div class="case-summary">${case.summary || 'Legal case summary unavailable.'}</div>
                                <div class="case-meta">
                                    <div class="meta-item"><strong>${case.court}</strong> • ${case.year}</div>
                                    <div class="meta-item">Relevance: ${case.relevance ? (case.relevance * 100).toFixed(1) + '%' : 'N/A'}</div>
                                </div>
                            </div>
                        `).join('');
                        
                        listDiv.innerHTML = casesHTML;
                        resultsDiv.style.display = 'block';
                    } else {
                        countDiv.textContent = `No cases found for "${data.query || 'your search'}"`;
                        listDiv.innerHTML = '<div class="no-results">No matching cases found. Try different search terms or browse by legal doctrine.</div>';
                        resultsDiv.style.display = 'block';
                    }
                }
                                    <div class="meta-item">Court: ${case.court}</div>
                                    <div class="meta-item">Year: ${case.year}</div>
                                    <div class="meta-item">Topic: ${case.topic}</div>
                                    <div class="meta-item">Relevance: ${(case.relevance * 100).toFixed(1)}%</div>
                                </div>
                            </div>
                        `).join('');
                        
                        listDiv.innerHTML = casesHTML;
                        resultsDiv.style.display = 'block';
                        document.getElementById('noResults').style.display = 'none';
                    } else {
                        resultsDiv.style.display = 'none';
                        document.getElementById('noResults').style.display = 'block';
                    }
                }
                
                function showLoading() {
                    document.getElementById('searchLoading').style.display = 'block';
                }
                
                function hideLoading() {
                    document.getElementById('searchLoading').style.display = 'none';
                }
                
                function hideResults() {
                    document.getElementById('searchResults').style.display = 'none';
                    document.getElementById('noResults').style.display = 'none';
                }
                
                function showError(message) {
                    alert('Error: ' + message);
                }
                
                function viewCase(caseId) {
                    window.open(`/case/${caseId}`, '_blank');
                }
                
                // Doctrine cloud functionality
                function loadDoctrines() {
                    const doctrines = [
                        'Civil Rights', 'Constitutional Law', 'Criminal Procedure', 'Due Process',
                        'Equal Protection', 'Qualified Immunity', 'Search and Seizure', 'Free Speech',
                        'Commerce Clause', 'Substantive Due Process', 'Procedural Due Process',
                        'Miranda Rights', 'Habeas Corpus', 'Double Jeopardy', 'Self-Incrimination',
                        'Cruel and Unusual Punishment', 'Establishment Clause', 'Free Exercise',
                        'Privacy Rights', 'Property Rights', 'Contract Law', 'Tort Law',
                        'Administrative Law', 'Federal Jurisdiction', 'State Sovereignty'
                    ];
                    
                    const cloudHTML = doctrines.map(doctrine => {
                        const size = Math.random() > 0.7 ? 'large' : Math.random() > 0.4 ? 'medium' : 'small';
                        return `<span class="doctrine-tag size-${size}" onclick="searchDoctrine('${doctrine}')">${doctrine}</span>`;
                    }).join('');
                    
                    document.getElementById('doctrineCloud').innerHTML = cloudHTML;
                }
                
                function filterDoctrines() {
                    const filter = document.getElementById('doctrineSearch').value.toLowerCase();
                    const tags = document.querySelectorAll('.doctrine-tag');
                    
                    tags.forEach(tag => {
                        if (tag.textContent.toLowerCase().includes(filter)) {
                            tag.style.display = 'inline-block';
                        } else {
                            tag.style.display = 'none';
                        }
                    });
                }
                
                function searchDoctrine(doctrine) {
                    document.getElementById('searchQuery').value = doctrine;
                    showTab('search');
                    performSearch();
                }
                
                // Temporal deontic logic analysis
                function analyzeTemporalLogic() {
                    const doctrine = document.getElementById('doctrineSelect').value;
                    if (!doctrine) {
                        alert('Please select a legal doctrine to analyze.');
                        return;
                    }
                    
                    fetch(`/api/temporal-deontic/${encodeURIComponent(doctrine)}`)
                        .then(response => response.json())
                        .then(data => {
                            displayTemporalResults(data);
                        })
                        .catch(error => {
                            showError('Temporal analysis failed: ' + error.message);
                        });
                }
                
                function displayTemporalResults(data) {
                    const resultsDiv = document.getElementById('temporalResults');
                    
                    if (data.status === 'success' && data.analysis) {
                        const analysis = data.analysis;
                        const html = `
                            <div class="results-header">
                                <div class="results-title">Temporal Deontic Logic Analysis</div>
                                <div class="results-count">${analysis.chronological_evolution.length} cases analyzed</div>
                            </div>
                            <div style="padding: 20px;">
                                <h3>Chronological Evolution:</h3>
                                ${analysis.chronological_evolution.map(case => `
                                    <div class="case-result">
                                        <div class="case-title">${case.year}: ${case.case_id}</div>
                                        <div class="case-meta">O:${case.obligations} P:${case.permissions} F:${case.prohibitions}</div>
                                    </div>
                                `).join('')}
                                
                                <h3>Generated Theorems:</h3>
                                ${analysis.theorems.map((theorem, index) => `
                                    <div class="case-result">
                                        <div class="case-title">📜 ${theorem.name}</div>
                                        <div class="case-citation">Formal: ${theorem.formal_logic.substring(0, 100)}...</div>
                                        <div class="case-summary">${theorem.natural_language}</div>
                                        <div class="case-meta">
                                            <div class="meta-item">Supporting Cases: ${theorem.supporting_cases}</div>
                                        </div>
                                    </div>
                                `).join('')}
                                
                                <div class="metric-card">
                                    <h3>Consistency Analysis: ${analysis.consistency_check.is_consistent ? '✅ CONSISTENT' : '❌ CONFLICTS DETECTED'}</h3>
                                    <p>Conflicts: ${analysis.consistency_check.conflicts}</p>
                                    <p>Temporal Violations: ${analysis.consistency_check.temporal_violations}</p>
                                </div>
                            </div>
                        `;
                        
                        resultsDiv.innerHTML = html;
                        resultsDiv.style.display = 'block';
                    } else {
                        resultsDiv.innerHTML = '<div style="padding: 20px; text-align: center; color: #64748b;">No temporal logic analysis available for this doctrine.</div>';
                        resultsDiv.style.display = 'block';
                    }
                }
                
                function loadAnalytics() {
                    // Analytics tab is already populated server-side
                }
                
                // Event listeners
                document.addEventListener('DOMContentLoaded', function() {
                    document.getElementById('searchQuery').addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            performSearch();
                        }
                    });
                    
                    // Load initial content
                    loadDoctrines();
                });
            </script>
        </body>
        </html>
        """
    
    def _generate_court_stats_html(self) -> str:
        """Generate HTML for court distribution statistics"""
        if not self.processed_data:
            return "<p>No data available</p>"
        
        stats = self.processed_data['knowledge_graph']['statistics']
        court_dist = stats.get('court_distribution', {})
        
        html_parts = []
        for court, count in list(court_dist.items())[:8]:
            percentage = (count / sum(court_dist.values())) * 100 if court_dist.values() else 0
            html_parts.append(f"""
                <div class="stat-row">
                    <div class="stat-label">{court}</div>
                    <div class="stat-bar">
                        <div class="stat-fill" style="width: {percentage:.1f}%"></div>
                    </div>
                    <div class="stat-value">{count} cases</div>
                </div>
            """)
        
        return ''.join(html_parts) + """
            <style>
                .stat-row { display: flex; align-items: center; margin: 8px 0; }
                .stat-label { flex: 1; font-size: 0.875rem; color: #475569; }
                .stat-bar { flex: 2; height: 8px; background: #f1f5f9; border-radius: 4px; margin: 0 12px; }
                .stat-fill { height: 100%; background: linear-gradient(90deg, #3b82f6, #1d4ed8); border-radius: 4px; }
                .stat-value { font-size: 0.75rem; color: #64748b; font-weight: 500; }
            </style>
        """
    
    def _generate_topic_stats_html(self) -> str:
        """Generate HTML for legal topic distribution statistics"""
        if not self.processed_data:
            return "<p>No data available</p>"
        
        stats = self.processed_data['knowledge_graph']['statistics']
        topic_dist = stats.get('most_common_topics', {})
        
        html_parts = []
        for topic, count in list(topic_dist.items())[:8]:
            percentage = (count / sum(topic_dist.values())) * 100 if topic_dist.values() else 0
            html_parts.append(f"""
                <div class="stat-row">
                    <div class="stat-label">{topic.title()}</div>
                    <div class="stat-bar">
                        <div class="stat-fill" style="width: {percentage:.1f}%"></div>
                    </div>
                    <div class="stat-value">{count} cases</div>
                </div>
            """)
        
        return ''.join(html_parts) + """
            <style>
                .stat-row { display: flex; align-items: center; margin: 8px 0; }
                .stat-label { flex: 1; font-size: 0.875rem; color: #475569; }
                .stat-bar { flex: 2; height: 8px; background: #f1f5f9; border-radius: 4px; margin: 0 12px; }
                .stat-fill { height: 100%; background: linear-gradient(90deg, #dc2626, #991b1b); border-radius: 4px; }
                .stat-value { font-size: 0.75rem; color: #64748b; font-weight: 500; }
            </style>
        """
    
    def run(self, host: str = "0.0.0.0", port: int = 5000, initialize_data: bool = True):
        """Run the professional legal research platform"""
        if not FLASK_AVAILABLE:
            logger.error("Flask not available - cannot run dashboard")
            return
        
        if initialize_data:
            init_result = self.initialize_data(max_samples=100)
            if init_result['status'] == 'success':
                logger.info(f"✅ Dashboard initialized with {init_result['data']['dataset_info']['count']} cases")
            else:
                logger.warning(f"⚠️ Data initialization failed: {init_result['message']}")
        
        logger.info(f"🚀 Starting Legal Research Platform at http://{host}:{port}")
        self.app.run(host=host, port=port, debug=self.debug)


def create_caselaw_dashboard(cache_dir: Optional[str] = None, debug: bool = False) -> CaselawDashboard:
    """Factory function to create a professional legal research platform"""
    return CaselawDashboard(cache_dir=cache_dir, debug=debug)
