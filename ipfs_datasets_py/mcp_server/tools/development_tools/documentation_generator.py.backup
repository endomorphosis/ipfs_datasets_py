"""
Documentation Generator Tool

Generates comprehensive documentation from Python source code.
Migrated from claudes_toolbox with enhanced dataset-aware capabilities.
"""

import ast
import inspect
import os
import re
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass
import logging
from concurrent.futures import ThreadPoolExecutor
import asyncio

try:
    from jinja2 import Template, Environment, FileSystemLoader
    JINJA2_AVAILABLE = True
except ImportError:
    JINJA2_AVAILABLE = False
    Template = Environment = FileSystemLoader = None

import importlib.util

from .base_tool import BaseDevelopmentTool, development_tool_mcp_wrapper
from .config import get_config

logger = logging.getLogger(__name__)


@dataclass
class DocElement:
    """Represents a documentation element."""
    name: str
    type: str  # 'class', 'function', 'method', 'property', 'module'
    docstring: Optional[str] = None
    signature: Optional[str] = None
    parameters: List[Dict[str, Any]] = None
    returns: Optional[Dict[str, Any]] = None
    raises: List[Dict[str, Any]] = None
    examples: List[str] = None
    parent: Optional[str] = None
    file_path: Optional[str] = None
    line_number: Optional[int] = None

    def __post_init__(self):
        if self.parameters is None:
            self.parameters = []
        if self.raises is None:
            self.raises = []
        if self.examples is None:
            self.examples = []


class DocstringParser:
    """Parse different docstring styles (Google, NumPy, reStructuredText)."""

    def __init__(self, style: str = "google"):
        self.style = style.lower()

    def parse(self, docstring: str) -> Dict[str, Any]:
        """Parse docstring into structured components."""
        if not docstring:
            return {}

        if self.style == "google":
            return self._parse_google_style(docstring)
        elif self.style == "numpy":
            return self._parse_numpy_style(docstring)
        elif self.style == "rest":
            return self._parse_rest_style(docstring)
        else:
            return {"description": docstring.strip()}

    def _parse_google_style(self, docstring: str) -> Dict[str, Any]:
        """Parse Google-style docstrings."""
        sections = {
            "description": "",
            "parameters": [],
            "returns": None,
            "raises": [],
            "examples": []
        }

        lines = docstring.split('\n')
        current_section = "description"
        current_content = []

        for line in lines:
            line = line.strip()

            if line.endswith(':') and line[:-1] in ['Args', 'Arguments', 'Parameters', 'Param']:
                if current_content:
                    sections[current_section] = '\n'.join(current_content).strip()
                current_section = "parameters"
                current_content = []
            elif line.endswith(':') and line[:-1] in ['Returns', 'Return']:
                if current_content and current_section == "parameters":
                    sections["parameters"] = self._parse_parameters(current_content)
                elif current_content:
                    sections[current_section] = '\n'.join(current_content).strip()
                current_section = "returns"
                current_content = []
            elif line.endswith(':') and line[:-1] in ['Raises', 'Raise']:
                if current_content and current_section == "parameters":
                    sections["parameters"] = self._parse_parameters(current_content)
                elif current_content and current_section == "returns":
                    sections["returns"] = {"description": '\n'.join(current_content).strip()}
                elif current_content:
                    sections[current_section] = '\n'.join(current_content).strip()
                current_section = "raises"
                current_content = []
            elif line.endswith(':') and line[:-1] in ['Examples', 'Example']:
                if current_content and current_section == "parameters":
                    sections["parameters"] = self._parse_parameters(current_content)
                elif current_content and current_section == "returns":
                    sections["returns"] = {"description": '\n'.join(current_content).strip()}
                elif current_content and current_section == "raises":
                    sections["raises"] = self._parse_raises(current_content)
                elif current_content:
                    sections[current_section] = '\n'.join(current_content).strip()
                current_section = "examples"
                current_content = []
            else:
                current_content.append(line)

        # Handle final section
        if current_content:
            if current_section == "parameters":
                sections["parameters"] = self._parse_parameters(current_content)
            elif current_section == "returns":
                sections["returns"] = {"description": '\n'.join(current_content).strip()}
            elif current_section == "raises":
                sections["raises"] = self._parse_raises(current_content)
            elif current_section == "examples":
                sections["examples"] = ['\n'.join(current_content).strip()]
            else:
                sections[current_section] = '\n'.join(current_content).strip()

        return sections

    def _parse_parameters(self, lines: List[str]) -> List[Dict[str, Any]]:
        """Parse parameter documentation."""
        parameters = []
        current_param = None

        for line in lines:
            if not line.strip():
                continue

            # Check if line starts a new parameter
            match = re.match(r'^\s*(\w+)\s*(\([^)]+\))?\s*:\s*(.*)', line)
            if match:
                if current_param:
                    parameters.append(current_param)

                param_name = match.group(1)
                param_type = match.group(2)
                param_desc = match.group(3)

                current_param = {
                    "name": param_name,
                    "type": param_type.strip('()') if param_type else None,
                    "description": param_desc
                }
            elif current_param:
                # Continue previous parameter description
                current_param["description"] += " " + line.strip()

        if current_param:
            parameters.append(current_param)

        return parameters

    def _parse_raises(self, lines: List[str]) -> List[Dict[str, Any]]:
        """Parse raises documentation."""
        raises = []
        current_exception = None

        for line in lines:
            if not line.strip():
                continue

            # Check if line starts a new exception
            match = re.match(r'^\s*(\w+)\s*:\s*(.*)', line)
            if match:
                if current_exception:
                    raises.append(current_exception)

                exc_name = match.group(1)
                exc_desc = match.group(2)

                current_exception = {
                    "exception": exc_name,
                    "description": exc_desc
                }
            elif current_exception:
                # Continue previous exception description
                current_exception["description"] += " " + line.strip()

        if current_exception:
            raises.append(current_exception)

        return raises

    def _parse_numpy_style(self, docstring: str) -> Dict[str, Any]:
        """Parse NumPy-style docstrings."""
        # Simplified implementation - extend as needed
        return {"description": docstring.strip()}

    def _parse_rest_style(self, docstring: str) -> Dict[str, Any]:
        """Parse reStructuredText-style docstrings."""
        # Simplified implementation - extend as needed
        return {"description": docstring.strip()}


class PythonCodeAnalyzer:
    """Analyze Python source code to extract documentation elements."""

    def __init__(self, docstring_style: str = "google"):
        self.parser = DocstringParser(docstring_style)

    def analyze_file(self, file_path: Path) -> List[DocElement]:
        """Analyze a Python file and extract documentation elements."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                source = f.read()

            tree = ast.parse(source)
            elements = []

            # Analyze module-level docstring
            module_doc = ast.get_docstring(tree)
            if module_doc:
                parsed_doc = self.parser.parse(module_doc)
                elements.append(DocElement(
                    name=file_path.stem,
                    type="module",
                    docstring=module_doc,
                    file_path=str(file_path),
                    line_number=1
                ))

            # Walk through AST nodes
            for node in ast.walk(tree):
                if isinstance(node, ast.ClassDef):
                    elements.extend(self._analyze_class(node, file_path))
                elif isinstance(node, ast.FunctionDef):
                    elements.append(self._analyze_function(node, file_path))
                elif isinstance(node, ast.AsyncFunctionDef):
                    elements.append(self._analyze_function(node, file_path, is_async=True))

            return elements

        except Exception as e:
            logger.error(f"Error analyzing file {file_path}: {e}")
            return []

    def _analyze_class(self, node: ast.ClassDef, file_path: Path) -> List[DocElement]:
        """Analyze a class definition."""
        elements = []

        # Class itself
        class_doc = ast.get_docstring(node)
        parsed_doc = self.parser.parse(class_doc) if class_doc else {}

        elements.append(DocElement(
            name=node.name,
            type="class",
            docstring=class_doc,
            signature=self._get_class_signature(node),
            file_path=str(file_path),
            line_number=node.lineno
        ))

        # Methods and properties
        for item in node.body:
            if isinstance(item, ast.FunctionDef):
                method_element = self._analyze_function(item, file_path, parent=node.name)
                elements.append(method_element)
            elif isinstance(item, ast.AsyncFunctionDef):
                method_element = self._analyze_function(item, file_path, parent=node.name, is_async=True)
                elements.append(method_element)

        return elements

    def _analyze_function(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef],
                         file_path: Path, parent: Optional[str] = None,
                         is_async: bool = False) -> DocElement:
        """Analyze a function or method definition."""
        func_doc = ast.get_docstring(node)
        parsed_doc = self.parser.parse(func_doc) if func_doc else {}

        # Determine if it's a method, property, or function
        element_type = "function"
        if parent:
            if any(decorator.id == "property" for decorator in node.decorator_list
                  if isinstance(decorator, ast.Name)):
                element_type = "property"
            else:
                element_type = "method"

        return DocElement(
            name=node.name,
            type=element_type,
            docstring=func_doc,
            signature=self._get_function_signature(node, is_async),
            parameters=parsed_doc.get("parameters", []),
            returns=parsed_doc.get("returns"),
            raises=parsed_doc.get("raises", []),
            examples=parsed_doc.get("examples", []),
            parent=parent,
            file_path=str(file_path),
            line_number=node.lineno
        )

    def _get_class_signature(self, node: ast.ClassDef) -> str:
        """Generate class signature."""
        bases = [self._get_node_name(base) for base in node.bases]
        if bases:
            return f"class {node.name}({', '.join(bases)})"
        return f"class {node.name}"

    def _get_function_signature(self, node: Union[ast.FunctionDef, ast.AsyncFunctionDef],
                               is_async: bool = False) -> str:
        """Generate function signature."""
        args = []

        # Handle arguments
        for arg in node.args.args:
            arg_str = arg.arg
            if arg.annotation:
                arg_str += f": {self._get_node_name(arg.annotation)}"
            args.append(arg_str)

        # Handle *args
        if node.args.vararg:
            vararg = f"*{node.args.vararg.arg}"
            if node.args.vararg.annotation:
                vararg += f": {self._get_node_name(node.args.vararg.annotation)}"
            args.append(vararg)

        # Handle **kwargs
        if node.args.kwarg:
            kwarg = f"**{node.args.kwarg.arg}"
            if node.args.kwarg.annotation:
                kwarg += f": {self._get_node_name(node.args.kwarg.annotation)}"
            args.append(kwarg)

        # Return type
        return_annotation = ""
        if node.returns:
            return_annotation = f" -> {self._get_node_name(node.returns)}"

        prefix = "async def" if is_async else "def"
        return f"{prefix} {node.name}({', '.join(args)}){return_annotation}"

    def _get_node_name(self, node: ast.AST) -> str:
        """Get string representation of an AST node."""
        if isinstance(node, ast.Name):
            return node.id
        elif isinstance(node, ast.Attribute):
            return f"{self._get_node_name(node.value)}.{node.attr}"
        elif isinstance(node, ast.Subscript):
            return f"{self._get_node_name(node.value)}[{self._get_node_name(node.slice)}]"
        elif isinstance(node, ast.Constant):
            return repr(node.value)
        else:
            return ast.unparse(node) if hasattr(ast, 'unparse') else str(node)


class DocumentationGenerator(BaseDevelopmentTool):
    """
    Documentation generator tool with enhanced capabilities for IPFS datasets.

    Generates comprehensive markdown documentation from Python source code,
    with special support for dataset processing workflows and MCP tools.
    """

    def __init__(self):
        super().__init__(
            name="documentation_generator",
            description="Generate comprehensive documentation from Python source code",
            category="development"
        )
        self.config = get_config().documentation_generator
        self.analyzer = PythonCodeAnalyzer(self.config.docstring_style)

        # Setup Jinja2 environment
        if JINJA2_AVAILABLE:
            template_dir = Path(__file__).parent / "templates" / "documentation"
            if template_dir.exists():
                self.jinja_env = Environment(loader=FileSystemLoader(template_dir))
            else:
                self.jinja_env = Environment(loader=FileSystemLoader("."))
        else:
            self.jinja_env = None

    async def _execute_core(self, **kwargs) -> Dict[str, Any]:
        """
        Core execution logic for the documentation generator.

        Args:
            **kwargs: Tool-specific parameters forwarded to generate_documentation

        Returns:
            Tool execution result
        """
        return await self.generate_documentation(**kwargs)

    async def generate_documentation(self,
                                   input_path: str,
                                   output_path: str = "docs",
                                   docstring_style: str = "google",
                                   ignore_patterns: Optional[List[str]] = None,
                                   include_inheritance: bool = True,
                                   include_examples: bool = True,
                                   include_source_links: bool = True,
                                   format_type: str = "markdown") -> Dict[str, Any]:
        """
        Generate documentation from Python source code.

        Args:
            input_path: Path to Python file or directory to document
            output_path: Directory to save generated documentation
            docstring_style: Docstring parsing style ('google', 'numpy', 'rest')
            ignore_patterns: List of glob patterns to ignore
            include_inheritance: Include class inheritance information
            include_examples: Include code examples in documentation
            include_source_links: Include links to source code
            format_type: Output format ('markdown', 'html')

        Returns:
            Dictionary containing generation results and metadata
        """
        try:
            # Validate inputs
            input_path = self._validate_path(input_path)
            output_path = self._validate_output_dir(output_path)

            if ignore_patterns is None:
                ignore_patterns = self.config.default_ignore_patterns

            # Update analyzer style if different
            if docstring_style != self.analyzer.parser.style:
                self.analyzer = PythonCodeAnalyzer(docstring_style)

            # Discover Python files
            python_files = self._discover_python_files(input_path, ignore_patterns)

            if not python_files:
                return self._create_error_result("No Python files found in input path")

            # Analyze files in parallel
            documentation_elements = await self._analyze_files_parallel(python_files)

            # Organize elements by module/file
            organized_docs = self._organize_documentation(documentation_elements)

            # Generate documentation files
            generated_files = await self._generate_documentation_files(
                organized_docs,
                output_path,
                format_type,
                include_inheritance=include_inheritance,
                include_examples=include_examples,
                include_source_links=include_source_links
            )

            # Generate index/overview
            index_file = await self._generate_index(organized_docs, output_path, format_type)
            generated_files.append(index_file)

            await self._audit_log("documentation.generated", {
                "input_path": str(input_path),
                "output_path": str(output_path),
                "files_analyzed": len(python_files),
                "files_generated": len(generated_files),
                "format": format_type
            })

            return self._create_success_result({
                "input_path": str(input_path),
                "output_path": str(output_path),
                "files_analyzed": len(python_files),
                "elements_documented": len(documentation_elements),
                "files_generated": generated_files,
                "format": format_type
            })

        except Exception as e:
            logger.error(f"Documentation generation failed: {e}")
            return self._create_error_result(f"Documentation generation failed: {e}")

    def _discover_python_files(self, input_path: Path, ignore_patterns: List[str]) -> List[Path]:
        """Discover Python files to document."""
        python_files = []

        if input_path.is_file() and input_path.suffix == '.py':
            return [input_path]

        if input_path.is_dir():
            for pattern in ['**/*.py']:
                for file_path in input_path.glob(pattern):
                    if self._should_include_file(file_path, ignore_patterns):
                        python_files.append(file_path)

        return sorted(python_files)

    def _should_include_file(self, file_path: Path, ignore_patterns: List[str]) -> bool:
        """Check if file should be included based on ignore patterns."""
        file_str = str(file_path)

        for pattern in ignore_patterns:
            if file_path.match(pattern) or pattern in file_str:
                return False

        return True

    async def _analyze_files_parallel(self, python_files: List[Path]) -> List[DocElement]:
        """Analyze Python files in parallel."""
        def analyze_file_sync(file_path):
            return self.analyzer.analyze_file(file_path)

        loop = asyncio.get_event_loop()

        with ThreadPoolExecutor(max_workers=4) as executor:
            tasks = [
                loop.run_in_executor(executor, analyze_file_sync, file_path)
                for file_path in python_files
            ]

            results = await asyncio.gather(*tasks)

        # Flatten results
        documentation_elements = []
        for elements in results:
            documentation_elements.extend(elements)

        return documentation_elements

    def _organize_documentation(self, elements: List[DocElement]) -> Dict[str, Any]:
        """Organize documentation elements by module/file."""
        organized = {}

        for element in elements:
            file_path = element.file_path
            if file_path not in organized:
                organized[file_path] = {
                    "module": None,
                    "classes": [],
                    "functions": [],
                    "path": file_path
                }

            if element.type == "module":
                organized[file_path]["module"] = element
            elif element.type == "class":
                organized[file_path]["classes"].append(element)
            elif element.type in ["function", "method", "property"]:
                if element.parent:
                    # Find parent class and add method/property
                    for class_elem in organized[file_path]["classes"]:
                        if class_elem.name == element.parent:
                            if not hasattr(class_elem, 'methods'):
                                class_elem.methods = []
                            class_elem.methods.append(element)
                            break
                else:
                    organized[file_path]["functions"].append(element)

        return organized

    async def _generate_documentation_files(self,
                                          organized_docs: Dict[str, Any],
                                          output_path: Path,
                                          format_type: str,
                                          **options) -> List[str]:
        """Generate documentation files from organized elements."""
        generated_files = []

        # Load template
        template_name = f"module.{format_type}.j2"
        try:
            if self.jinja_env:
                template = self.jinja_env.get_template(template_name)
            else:
                raise Exception("Jinja2 not available")
        except:
            # Fallback to simple template
            template = self._get_default_template(format_type)

        for file_path, doc_data in organized_docs.items():
            # Generate documentation for this module
            relative_path = Path(file_path).relative_to(Path.cwd()) if Path(file_path).is_absolute() else Path(file_path)
            doc_filename = f"{relative_path.stem}.{format_type}"
            doc_filepath = output_path / doc_filename

            # Ensure directory exists
            doc_filepath.parent.mkdir(parents=True, exist_ok=True)

            # Render template
            content = template.render(
                module_data=doc_data,
                file_path=file_path,
                relative_path=str(relative_path),
                **options
            )

            # Write file
            with open(doc_filepath, 'w', encoding='utf-8') as f:
                f.write(content)

            generated_files.append(str(doc_filepath))

        return generated_files

    async def _generate_index(self, organized_docs: Dict[str, Any],
                            output_path: Path, format_type: str) -> str:
        """Generate index/overview file."""
        index_filename = f"index.{format_type}"
        index_filepath = output_path / index_filename

        # Simple index generation
        if format_type == "markdown":
            content = self._generate_markdown_index(organized_docs)
        else:
            content = self._generate_html_index(organized_docs)

        with open(index_filepath, 'w', encoding='utf-8') as f:
            f.write(content)

        return str(index_filepath)

    def _generate_markdown_index(self, organized_docs: Dict[str, Any]) -> str:
        """Generate markdown index."""
        lines = [
            "# Documentation Index",
            "",
            "Generated documentation for Python modules.",
            "",
            "## Modules",
            ""
        ]

        for file_path, doc_data in organized_docs.items():
            relative_path = Path(file_path).relative_to(Path.cwd()) if Path(file_path).is_absolute() else Path(file_path)
            module_name = relative_path.stem
            doc_link = f"{module_name}.md"

            lines.append(f"- [{module_name}]({doc_link})")

            if doc_data.get("module") and doc_data["module"].docstring:
                # Add brief description
                first_line = doc_data["module"].docstring.split('\n')[0]
                lines.append(f"  - {first_line}")

        return '\n'.join(lines)

    def _generate_html_index(self, organized_docs: Dict[str, Any]) -> str:
        """Generate HTML index."""
        # Simple HTML index - extend as needed
        return "<html><body><h1>Documentation Index</h1></body></html>"


class SimpleTemplate:
    """Simple template replacement when jinja2 is not available."""
    
    def __init__(self, format_type: str, template_content: str = ""):
        self.format_type = format_type
        self.template_content = template_content
    
    def render(self, **kwargs):
        """Render template with simple string replacement."""
        module_data = kwargs.get('module_data', {})
        file_path = kwargs.get('file_path', 'unknown')
        
        if self.format_type == "markdown":
            content = f"# Documentation for {file_path}\n\n"
            
            if module_data and 'module' in module_data and module_data['module']:
                mod = module_data['module']
                if hasattr(mod, 'name'):
                    content = f"# {mod.name}\n\n"
                if hasattr(mod, 'docstring') and mod.docstring:
                    content += f"{mod.docstring}\n\n"
            
            if module_data and 'classes' in module_data:
                content += "## Classes\n\n"
                for class_elem in module_data['classes']:
                    content += f"### {class_elem.name}\n\n"
                    if class_elem.docstring:
                        content += f"{class_elem.docstring}\n\n"
            
            if module_data and 'functions' in module_data:
                content += "## Functions\n\n"
                for func in module_data['functions']:
                    content += f"### {func.name}\n\n"
                    if func.docstring:
                        content += f"{func.docstring}\n\n"
            
            return content
        else:
            # HTML fallback
            return f"<html><body><h1>Documentation for {file_path}</h1></body></html>"


class DocumentationGenerator(BaseDevelopmentTool):
        """Get default template for format type."""
        if format_type == "markdown":
            template_content = """# {{ module_data.module.name if module_data.module else file_path | basename }}

{% if module_data.module and module_data.module.docstring %}
{{ module_data.module.docstring }}
{% endif %}

{% if module_data.classes %}
## Classes

{% for class_elem in module_data.classes %}
### {{ class_elem.name }}

{% if class_elem.signature %}
```python
{{ class_elem.signature }}
```
{% endif %}

{% if class_elem.docstring %}
{{ class_elem.docstring }}
{% endif %}

{% if class_elem.methods %}
#### Methods

{% for method in class_elem.methods %}
##### {{ method.name }}

{% if method.signature %}
```python
{{ method.signature }}
```
{% endif %}

{% if method.docstring %}
{{ method.docstring }}
{% endif %}

{% endfor %}
{% endif %}

{% endfor %}
{% endif %}

{% if module_data.functions %}
## Functions

{% for func in module_data.functions %}
### {{ func.name }}

{% if func.signature %}
```python
{{ func.signature }}
```
{% endif %}

{% if func.docstring %}
{{ func.docstring }}
{% endif %}

{% endfor %}
{% endif %}
"""
        else:
            template_content = "<html><body><h1>Module Documentation</h1></body></html>"

        return Template(template_content) if JINJA2_AVAILABLE else SimpleTemplate(format_type, template_content)


# Create MCP tool wrapper
@development_tool_mcp_wrapper
def documentation_generator(input_path: str,
                          output_path: str = "docs",
                          docstring_style: str = "google",
                          ignore_patterns: Optional[List[str]] = None,
                          include_inheritance: bool = True,
                          include_examples: bool = True,
                          include_source_links: bool = True,
                          format_type: str = "markdown") -> Dict[str, Any]:
    """
    Generate comprehensive documentation from Python source code.

    Args:
        input_path: Path to Python file or directory to document
        output_path: Directory to save generated documentation (default: "docs")
        docstring_style: Docstring parsing style - 'google', 'numpy', 'rest' (default: "google")
        ignore_patterns: List of glob patterns to ignore (default: None)
        include_inheritance: Include class inheritance information (default: True)
        include_examples: Include code examples in documentation (default: True)
        include_source_links: Include links to source code (default: True)
        format_type: Output format - 'markdown', 'html' (default: "markdown")

    Returns:
        Dictionary containing generation results, file paths, and metadata
    """
    try:
        tool = DocumentationGenerator()
        result = asyncio.run(tool.generate_documentation(
            input_path=input_path,
            output_path=output_path,
            docstring_style=docstring_style,
            ignore_patterns=ignore_patterns,
            include_inheritance=include_inheritance,
            include_examples=include_examples,
            include_source_links=include_source_links,
            format_type=format_type
        ))
        
        # Ensure we return a standardized success result
        if isinstance(result, dict) and 'success' in result:
            return result
        else:
            return {
                "success": True,
                "result": result,
                "metadata": {
                    "tool": "documentation_generator",
                    "input_path": input_path,
                    "output_path": output_path,
                    "format_type": format_type
                }
            }
    except Exception as e:
        return {
            "success": False,
            "error": "generation_error",
            "message": str(e),
            "metadata": {
                "tool": "documentation_generator",
                "input_path": input_path
            }
        }
