FROM python:3.10-slim

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install minimal Python dependencies
RUN pip install --no-cache-dir \
    mcp>=1.2.0 \
    Flask>=3.1.1 \
    pydantic>=2.0.0 \
    pyyaml>=6.0.0 \
    requests>=2.25.0 \
    numpy>=1.21.0 \
    psutil>=5.9.0

# Copy only the MCP server code
COPY ipfs_datasets_py/mcp_server/ /app/ipfs_datasets_py/mcp_server/
COPY ipfs_datasets_py/__init__.py /app/ipfs_datasets_py/
COPY ipfs_datasets_py/config/ /app/ipfs_datasets_py/config/

# Create a basic package structure
RUN echo '__version__ = "0.2.0"' > /app/ipfs_datasets_py/__init__.py

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Create a simple startup script that doesn't import the problematic modules
RUN echo '#!/usr/bin/env python3\n\
import sys\n\
import os\n\
sys.path.insert(0, "/app")\n\
\n\
# Simple MCP server without complex dependencies\n\
from flask import Flask, jsonify\n\
\n\
app = Flask(__name__)\n\
\n\
@app.route("/health")\n\
def health():\n\
    return jsonify({"status": "healthy", "service": "mcp-server"})\n\
\n\
@app.route("/api/mcp/status")\n\
def mcp_status():\n\
    return jsonify({\n\
        "status": "running",\n\
        "tools_available": 0,\n\
        "version": "0.2.0"\n\
    })\n\
\n\
if __name__ == "__main__":\n\
    app.run(host="0.0.0.0", port=8000, debug=False)\n\
' > /app/simple_mcp_server.py && chmod +x /app/simple_mcp_server.py

# Start the simple MCP server
CMD ["python", "/app/simple_mcp_server.py"]