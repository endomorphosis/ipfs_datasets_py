server:
  log_level: INFO
  verbose: True

tools:
  enabled_categories:
    - dataset
    - ipfs
    - vector
    - graph
    - audit
    - security
    - provenance
    - cli
    - functions
    - embedding # Added embedding category
  embedding: # Added embedding tool definitions under the existing tools key
    - name: generate_embedding
      description: Generates an embedding vector for a given text using specified model.
      input_schema:
        type: object
        properties:
          text:
            type: string
            description: The text to generate an embedding for.
            minLength: 1
            maxLength: 10000
          model:
            type: string
            description: The model to use for embedding generation.
            default: sentence-transformers/all-MiniLM-L6-v2
          normalize:
            type: boolean
            description: Whether to normalize the embedding vector.
            default: True
        required:
          - text
    - name: generate_batch_embeddings
      description: Generates embeddings for multiple texts in an efficient batch operation.
      input_schema:
        type: object
        properties:
          texts:
            type: array
            items:
              type: string
              minLength: 1
              maxLength: 10000
            description: List of texts to generate embeddings for.
            minItems: 1
            maxItems: 100
          model:
            type: string
            description: The model to use for embedding generation.
            default: sentence-transformers/all-MiniLM-L6-v2
          normalize:
            type: boolean
            description: Whether to normalize the embedding vectors.
            default: True
          batch_size:
            type: integer
            description: Number of texts to process in each batch.
            minimum: 1
            maximum: 50
            default: 10
        required:
          - texts
    - name: generate_multimodal_embedding
      description: Generates embeddings from multimodal content including text, images, and audio.
      input_schema:
        type: object
        properties:
          content:
            type: object
            properties:
              text:
                type: string
                description: Text content to embed.
              image_url:
                type: string
                description: URL or file path to image content.
              audio_url:
                type: string
                description: URL or file path to audio content.
            description: Multimodal content to generate embeddings for.
            minProperties: 1
          model:
            type: string
            description: The multimodal model to use.
            default: clip-vit-base-patch32
          fusion_strategy:
            type: string
            enum:
              - concatenate
              - average
              - weighted
              - attention
            description: Strategy for fusing multimodal embeddings.
            default: concatenate
          normalize:
            type: boolean
            description: Whether to normalize the final embedding.
            default: True
        required:
          - content

  search: # Added search tool definitions
    - name: semantic_search
      description: Performs semantic search on LAION embeddings using vector similarity.
      input_schema:
        type: object
        properties:
          query:
            type: string
            description: The search query text.
            minLength: 1
            maxLength: 1000
          model:
            type: string
            description: The embedding model to use for search.
            default: sentence-transformers/all-MiniLM-L6-v2
          top_k:
            type: integer
            description: Number of top results to return.
            default: 5
            minimum: 1
            maximum: 100
          collection:
            type: string
            description: Collection name to search in.
            default: default
          filters:
            type: object
            description: Optional metadata filters for search.
            default: {}
        required:
          - query
    - name: similarity_search
      description: Finds similar embeddings based on a reference embedding vector.
      input_schema:
        type: object
        properties:
          embedding:
            type: array
            items:
              type: number
            description: Reference embedding vector for similarity search.
            minItems: 1
          top_k:
            type: integer
            description: Number of similar embeddings to return.
            default: 10
            minimum: 1
            maximum: 100
          threshold:
            type: number
            description: Minimum similarity threshold (0-1).
            default: 0.5
            minimum: 0.0
            maximum: 1.0
          collection:
            type: string
            description: Collection name to search in.
            default: default
        required:
          - embedding
    - name: faceted_search
      description: Performs faceted search with metadata filters and aggregations.
      input_schema:
        type: object
        properties:
          query:
            type: string
            description: Search query text.
            default: ""
          facets:
            type: object
            description: Facet filters to apply.
            additionalProperties:
              type: array
              items:
                type: string
          aggregations:
            type: array
            items:
              type: string
            description: Fields to aggregate on.
            default: []
          top_k:
            type: integer
            description: Number of results to return.
            default: 20
            minimum: 1
            maximum: 100
          collection:
            type: string
            description: Collection name to search in.
            default: default
        required: []

  vector_store: # Added vector store tool definitions
    - name: manage_vector_index
      description: Create, update, or manage vector indexes for efficient search.
      input_schema:
        type: object
        properties:
          action:
            type: string
            enum:
              - create
              - update
              - delete
              - info
            description: Action to perform on the vector index.
          index_name:
            type: string
            description: Name of the vector index.
            minLength: 1
            maxLength: 100
          config:
            type: object
            description: Configuration for index creation/update.
            properties:
              dimension:
                type: integer
                minimum: 1
              metric:
                type: string
                enum:
                  - cosine
                  - euclidean
                  - dot
              index_type:
                type: string
                enum:
                  - faiss
                  - hnswlib
                  - annoy
        required:
          - action
          - index_name
    - name: retrieve_vectors
      description: Retrieve vectors from storage with optional filtering.
      input_schema:
        type: object
        properties:
          collection:
            type: string
            description: Collection name to retrieve from.
            default: default
          ids:
            type: array
            items:
              type: string
            description: Specific vector IDs to retrieve.
            minItems: 1
            maxItems: 1000
          filters:
            type: object
            description: Metadata filters for retrieval.
          limit:
            type: integer
            description: Maximum number of vectors to retrieve.
            minimum: 1
            maximum: 10000
            default: 100
        required: []
    - name: manage_vector_metadata
      description: Manage metadata associated with vectors.
      input_schema:
        type: object
        properties:
          action:
            type: string
            enum:
              - get
              - update
              - delete
              - list
            description: Action to perform on vector metadata.
          collection:
            type: string
            description: Collection name.
            default: default
          vector_id:
            type: string
            description: ID of the vector (required for get, update, delete).
          metadata:
            type: object
            description: Metadata to update (required for update action).
          filters:
            type: object
            description: Filters for listing metadata.
        required:
          - action
    - name: create_vector_store
      description: Create a vector store with specified configuration.
      input_schema:
        type: object
        properties:
          store_path:
            type: string
            description: Path where the vector store will be saved
          dimension:
            type: integer
            description: Vector dimension for the store
          provider:
            type: string
            description: Vector store provider (faiss, pinecone, chroma, etc.)
            default: faiss
          index_type:
            type: string
            description: Type of index to create
            default: flat
          config:
            type: object
            description: Additional configuration options
        required:
          - store_path
          - dimension
    - name: add_embeddings_to_store
      description: Add embeddings to an existing vector store.
      input_schema:
        type: object
        properties:
          store_id:
            type: string
            description: ID of the vector store
          embeddings:
            type: array
            items:
              type: array
              items:
                type: number
            description: List of embedding vectors
          metadata:
            type: array
            items:
              type: object
            description: Optional metadata for each embedding
          ids:
            type: array
            items:
              type: string
            description: Optional IDs for embeddings
        required:
          - store_id
          - embeddings
    - name: search_vector_store
      description: Search vectors in a vector store.
      input_schema:
        type: object
        properties:
          store_id:
            type: string
            description: ID of the vector store
          query_vector:
            type: array
            items:
              type: number
            description: Query vector for search
          top_k:
            type: integer
            description: Number of results to return
            default: 10
            minimum: 1
            maximum: 100
          filters:
            type: object
            description: Optional filters for search
        required:
          - store_id
          - query_vector
    - name: get_vector_store_stats
      description: Get statistics for a vector store.
      input_schema:
        type: object
        properties:
          store_id:
            type: string
            description: ID of the vector store
        required:
          - store_id
    - name: delete_from_vector_store
      description: Delete vectors from a vector store.
      input_schema:
        type: object
        properties:
          store_id:
            type: string
            description: ID of the vector store
          ids:
            type: array
            items:
              type: string
            description: List of vector IDs to delete
          filters:
            type: object
            description: Optional filters for bulk deletion
        required:
          - store_id
    - name: optimize_vector_store
      description: Optimize a vector store for better performance.
      input_schema:
        type: object
        properties:
          store_id:
            type: string
            description: ID of the vector store
        required:
          - store_id

ipfs_kit:
  integration: mcp
  mcp_url: http://localhost:5001 # Placeholder URL for ipfs_kit_py MCP server
