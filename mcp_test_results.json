{"created": 1748211946.4119804, "duration": 6.115918159484863, "exitcode": 2, "root": "/home/barberb/ipfs_datasets_py", "environment": {}, "summary": {"total": 0, "collected": 665, "deselected": 601}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "test", "type": "Package"}]}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_execute_response_action", "type": "TestCaseFunction", "lineno": 168, "deselected": true}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_handle_security_alert", "type": "TestCaseFunction", "lineno": 154, "deselected": true}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_response_expiration", "type": "TestCaseFunction", "lineno": 239, "deselected": true}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_response_handlers", "type": "TestCaseFunction", "lineno": 355, "deselected": true}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_response_lifecycle", "type": "TestCaseFunction", "lineno": 197, "deselected": true}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_response_rule_actions", "type": "TestCaseFunction", "lineno": 122, "deselected": true}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_response_rule_matching", "type": "TestCaseFunction", "lineno": 59, "deselected": true}, {"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity::test_save_and_load_responses", "type": "TestCaseFunction", "lineno": 291, "deselected": true}]}, {"nodeid": "test/phase1/test_adaptive_security.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_adaptive_security.py::TestAdaptiveSecurity", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard::test_authentication", "type": "TestCaseFunction", "lineno": 219, "deselected": true}, {"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard::test_create_templates_and_static", "type": "TestCaseFunction", "lineno": 146, "deselected": true}, {"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard::test_dashboard_initialization", "type": "TestCaseFunction", "lineno": 103, "deselected": true}, {"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard::test_dashboard_routes", "type": "TestCaseFunction", "lineno": 179, "deselected": true}, {"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard::test_get_recent_logs", "type": "TestCaseFunction", "lineno": 261, "deselected": true}, {"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard::test_start_stop_dashboard", "type": "TestCaseFunction", "lineno": 117, "deselected": true}, {"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard::test_system_stats", "type": "TestCaseFunction", "lineno": 204, "deselected": true}]}, {"nodeid": "test/phase1/test_admin_dashboard.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_admin_dashboard.py::TestAdminDashboard", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_compare_subgraphs", "type": "TestCaseFunction", "lineno": 547, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 923, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_cross_modal_linking", "type": "TestCaseFunction", "lineno": 760, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_expand_query", "type": "TestCaseFunction", "lineno": 367, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_explain_path", "type": "TestCaseFunction", "lineno": 194, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_find_entity_clusters", "type": "TestCaseFunction", "lineno": 332, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_find_similar_connected_nodes", "type": "TestCaseFunction", "lineno": 46, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_generate_contextual_embeddings", "type": "TestCaseFunction", "lineno": 491, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_hierarchical_path_search", "type": "TestCaseFunction", "lineno": 870, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_hybrid_structured_semantic_search", "type": "TestCaseFunction", "lineno": 217, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_incremental_graph_update", "type": "TestCaseFunction", "lineno": 145, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_knowledge_graph_completion", "type": "TestCaseFunction", "lineno": 685, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_logical_query", "type": "TestCaseFunction", "lineno": 102, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_multi_hop_inference", "type": "TestCaseFunction", "lineno": 297, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_rank_nodes_by_centrality", "type": "TestCaseFunction", "lineno": 266, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_resolve_entities", "type": "TestCaseFunction", "lineno": 408, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_schema_based_validation", "type": "TestCaseFunction", "lineno": 818, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_semantic_subgraph", "type": "TestCaseFunction", "lineno": 77, "deselected": true}, {"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods::test_temporal_graph_analysis", "type": "TestCaseFunction", "lineno": 622, "deselected": true}]}, {"nodeid": "test/phase1/test_advanced_graphrag.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_advanced_graphrag.py::TestAdvancedGraphRAGMethods", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_advanced_query_optimization.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/phase1/test_advanced_query_optimization.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/phase1/test_advanced_query_optimization.py:21: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'GraphRAGQueryOptimizer' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAnomalyDetectionMethods", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAnomalyDetectionMethods::test_calculate_severity", "type": "TestCaseFunction", "lineno": 502, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAnomalyDetectionMethods::test_check_for_anomalies", "type": "TestCaseFunction", "lineno": 520, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAnomalyDetectionMethods::test_detect_error_rate_anomalies", "type": "TestCaseFunction", "lineno": 231, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAnomalyDetectionMethods::test_detect_frequency_anomalies", "type": "TestCaseFunction", "lineno": 92, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAnomalyDetectionMethods::test_detect_user_activity_anomalies", "type": "TestCaseFunction", "lineno": 356, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAuditAlertManager", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAuditAlertManager::test_add_notification_handler", "type": "TestCaseFunction", "lineno": 797, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAuditAlertManager::test_create_security_alert_from_anomaly", "type": "TestCaseFunction", "lineno": 731, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAuditAlertManager::test_get_alert_description", "type": "TestCaseFunction", "lineno": 751, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAuditAlertManager::test_get_recent_alerts", "type": "TestCaseFunction", "lineno": 810, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAuditAlertManager::test_handle_anomaly_alert", "type": "TestCaseFunction", "lineno": 710, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestSecurityIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestSecurityIntegration::test_alert_response_flow", "type": "TestCaseFunction", "lineno": 1059, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestSecurityIntegration::test_end_to_end_alert_flow", "type": "TestCaseFunction", "lineno": 876, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestDashboardIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestDashboardIntegration::test_dashboard_with_anomalies", "type": "TestCaseFunction", "lineno": 1132, "deselected": true}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestDashboardIntegration::test_dashboard_without_anomalies", "type": "TestCaseFunction", "lineno": 1173, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAnomalyDetectionMethods", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestAuditAlertManager", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestSecurityIntegration", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py::TestDashboardIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditEvent", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_logging.py::TestAuditEvent::test_creation", "type": "TestCaseFunction", "lineno": 31, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditEvent::test_default_values", "type": "TestCaseFunction", "lineno": 57, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditEvent::test_deserialization", "type": "TestCaseFunction", "lineno": 96, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditEvent::test_serialization", "type": "TestCaseFunction", "lineno": 72, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditLogger", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_logging.py::TestAuditLogger::test_basic_logging", "type": "TestCaseFunction", "lineno": 151, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditLogger::test_context_application", "type": "TestCaseFunction", "lineno": 173, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditLogger::test_convenience_methods", "type": "TestCaseFunction", "lineno": 218, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditLogger::test_filtering", "type": "TestCaseFunction", "lineno": 245, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_logging.py::TestFileHandlers", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_logging.py::TestFileHandlers::test_file_handler", "type": "TestCaseFunction", "lineno": 318, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestFileHandlers::test_json_handler", "type": "TestCaseFunction", "lineno": 351, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_logging.py::TestComplianceReporting", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_logging.py::TestComplianceReporting::test_gdpr_compliance_reporter", "type": "TestCaseFunction", "lineno": 389, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_logging.py::TestIntrusionDetection", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_logging.py::TestIntrusionDetection::test_anomaly_detector", "type": "TestCaseFunction", "lineno": 477, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestIntrusionDetection::test_pattern_detection", "type": "TestCaseFunction", "lineno": 546, "deselected": true}, {"nodeid": "test/phase1/test_audit_logging.py::TestIntrusionDetection::test_security_alert_manager", "type": "TestCaseFunction", "lineno": 604, "deselected": true}]}, {"nodeid": "test/phase1/test_audit_logging.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_audit_logging.py::TestAuditEvent", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_audit_logging.py::TestAuditLogger", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_audit_logging.py::TestFileHandlers", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_audit_logging.py::TestComplianceReporting", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_audit_logging.py::TestIntrusionDetection", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_car_conversion.py::TestCarConversion", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_car_conversion.py::TestCarConversion::test_arrow_table_to_car", "type": "TestCaseFunction", "lineno": 79, "deselected": true}, {"nodeid": "test/phase1/test_car_conversion.py::TestCarConversion::test_car_to_arrow_table", "type": "TestCaseFunction", "lineno": 103, "deselected": true}, {"nodeid": "test/phase1/test_car_conversion.py::TestCarConversion::test_car_to_parquet_conversion", "type": "TestCaseFunction", "lineno": 151, "deselected": true}, {"nodeid": "test/phase1/test_car_conversion.py::TestCarConversion::test_parquet_to_car_conversion", "type": "TestCaseFunction", "lineno": 125, "deselected": true}, {"nodeid": "test/phase1/test_car_conversion.py::TestCarConversion::test_streaming_conversion", "type": "TestCaseFunction", "lineno": 183, "deselected": true}]}, {"nodeid": "test/phase1/test_car_conversion.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_car_conversion.py::TestCarConversion", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_cross_document_reasoning.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/phase1/test_cross_document_reasoning.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/phase1/test_cross_document_reasoning.py:21: in <module>\n    from ipfs_datasets_py.cross_document_reasoning import (\nipfs_datasets_py/cross_document_reasoning.py:36: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'UnifiedGraphRAGQueryOptimizer' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceRecords", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceRecords::test_merge_record", "type": "TestCaseFunction", "lineno": 96, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceRecords::test_query_record", "type": "TestCaseFunction", "lineno": 127, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceRecords::test_result_record", "type": "TestCaseFunction", "lineno": 161, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceRecords::test_source_record", "type": "TestCaseFunction", "lineno": 26, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceRecords::test_transformation_record", "type": "TestCaseFunction", "lineno": 59, "deselected": true}]}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_audit_report", "type": "TestCaseFunction", "lineno": 601, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_export_import", "type": "TestCaseFunction", "lineno": 455, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_lineage_and_visualization", "type": "TestCaseFunction", "lineno": 519, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_merge_and_checkpoint", "type": "TestCaseFunction", "lineno": 391, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_provenance_context", "type": "TestCaseFunction", "lineno": 279, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_query_flow", "type": "TestCaseFunction", "lineno": 336, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_record_source", "type": "TestCaseFunction", "lineno": 209, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager::test_transformation_flow", "type": "TestCaseFunction", "lineno": 236, "deselected": true}]}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceIntegrationWithIPLD", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceIntegrationWithIPLD::test_ipld_integration", "type": "TestCaseFunction", "lineno": 675, "deselected": true}]}, {"nodeid": "test/phase1/test_data_provenance.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceRecords", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceManager", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_data_provenance.py::TestProvenanceIntegrationWithIPLD", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceRecords", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceRecords::test_annotation_record", "type": "TestCaseFunction", "lineno": 64, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceRecords::test_model_inference_record", "type": "TestCaseFunction", "lineno": 128, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceRecords::test_model_training_record", "type": "TestCaseFunction", "lineno": 93, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceRecords::test_verification_record", "type": "TestCaseFunction", "lineno": 31, "deselected": true}]}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestProvenanceMetrics", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestProvenanceMetrics::test_calculate_centrality", "type": "TestCaseFunction", "lineno": 196, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestProvenanceMetrics::test_calculate_complexity", "type": "TestCaseFunction", "lineno": 219, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestProvenanceMetrics::test_calculate_data_impact", "type": "TestCaseFunction", "lineno": 180, "deselected": true}]}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_calculate_data_metrics", "type": "TestCaseFunction", "lineno": 456, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_create_cross_document_lineage", "type": "TestCaseFunction", "lineno": 592, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_record_annotation", "type": "TestCaseFunction", "lineno": 296, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_record_model_inference", "type": "TestCaseFunction", "lineno": 361, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_record_model_training", "type": "TestCaseFunction", "lineno": 328, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_record_verification", "type": "TestCaseFunction", "lineno": 256, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_semantic_search", "type": "TestCaseFunction", "lineno": 403, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_temporal_query", "type": "TestCaseFunction", "lineno": 449, "deselected": true}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager::test_visualize_provenance_enhanced", "type": "TestCaseFunction", "lineno": 530, "deselected": true}]}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceRecords", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestProvenanceMetrics", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py::TestEnhancedProvenanceManager", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_dataset_serialization.py::TestDatasetSerialization", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_dataset_serialization.py::TestDatasetSerialization::test_arrow_serialization", "type": "TestCaseFunction", "lineno": 98, "deselected": true}, {"nodeid": "test/phase1/test_dataset_serialization.py::TestDatasetSerialization::test_huggingface_serialization", "type": "TestCaseFunction", "lineno": 131, "deselected": true}, {"nodeid": "test/phase1/test_dataset_serialization.py::TestDatasetSerialization::test_large_dataset_streaming", "type": "TestCaseFunction", "lineno": 164, "deselected": true}]}, {"nodeid": "test/phase1/test_dataset_serialization.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_dataset_serialization.py::TestDatasetSerialization", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphNode", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_graphrag.py::TestGraphNode::test_edge_properties", "type": "TestCaseFunction", "lineno": 28, "deselected": true}]}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphDataset", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_graphrag.py::TestGraphDataset::test_add_and_get_nodes", "type": "TestCaseFunction", "lineno": 74, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphDataset::test_edge_properties", "type": "TestCaseFunction", "lineno": 94, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphDataset::test_find_paths", "type": "TestCaseFunction", "lineno": 151, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphDataset::test_traversal", "type": "TestCaseFunction", "lineno": 119, "deselected": true}]}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorAugmentedGraphDataset", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_graphrag.py::TestVectorAugmentedGraphDataset::test_graph_rag_search", "type": "TestCaseFunction", "lineno": 210, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorAugmentedGraphDataset::test_node_vector_search", "type": "TestCaseFunction", "lineno": 188, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorAugmentedGraphDataset::test_query_optimization", "type": "TestCaseFunction", "lineno": 239, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorAugmentedGraphDataset::test_vector_partitioning", "type": "TestCaseFunction", "lineno": 264, "deselected": true}]}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphRAGQueryOptimizer", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_graphrag.py::TestGraphRAGQueryOptimizer::test_query_optimization", "type": "TestCaseFunction", "lineno": 319, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphRAGQueryOptimizer::test_query_stats", "type": "TestCaseFunction", "lineno": 300, "deselected": true}]}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorIndexPartitioner", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_graphrag.py::TestVectorIndexPartitioner::test_partitioning", "type": "TestCaseFunction", "lineno": 372, "deselected": true}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorIndexPartitioner::test_search", "type": "TestCaseFunction", "lineno": 390, "deselected": true}]}, {"nodeid": "test/phase1/test_graphrag.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_graphrag.py::TestGraphNode", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphDataset", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorAugmentedGraphDataset", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_graphrag.py::TestGraphRAGQueryOptimizer", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_graphrag.py::TestVectorIndexPartitioner", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_graphrag_integration.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/phase1/test_graphrag_integration.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/phase1/test_graphrag_integration.py:24: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import UnifiedGraphRAGQueryOptimizer\nE   ImportError: cannot import name 'UnifiedGraphRAGQueryOptimizer' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/phase1/test_integrated_validation.py::TestKnowledgeGraphExtractorWithValidation", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_integrated_validation.py::TestKnowledgeGraphExtractorWithValidation::test_apply_validation_corrections", "type": "TestCaseFunction", "lineno": 193, "deselected": true}, {"nodeid": "test/phase1/test_integrated_validation.py::TestKnowledgeGraphExtractorWithValidation::test_extract_from_documents", "type": "TestCaseFunction", "lineno": 164, "deselected": true}, {"nodeid": "test/phase1/test_integrated_validation.py::TestKnowledgeGraphExtractorWithValidation::test_extract_from_wikipedia", "type": "TestCaseFunction", "lineno": 143, "deselected": true}, {"nodeid": "test/phase1/test_integrated_validation.py::TestKnowledgeGraphExtractorWithValidation::test_extract_knowledge_graph", "type": "TestCaseFunction", "lineno": 115, "deselected": true}]}, {"nodeid": "test/phase1/test_integrated_validation.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_integrated_validation.py::TestKnowledgeGraphExtractorWithValidation", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_ipld_knowledge_graph.py::TestIPLDKnowledgeGraph", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_ipld_knowledge_graph.py::TestIPLDKnowledgeGraph::test_add_entity", "type": "TestCaseFunction", "lineno": 58, "deselected": true}, {"nodeid": "test/phase1/test_ipld_knowledge_graph.py::TestIPLDKnowledgeGraph::test_add_relationship", "type": "TestCaseFunction", "lineno": 84, "deselected": true}, {"nodeid": "test/phase1/test_ipld_knowledge_graph.py::TestIPLDKnowledgeGraph::test_export_import_car", "type": "TestCaseFunction", "lineno": 249, "deselected": true}, {"nodeid": "test/phase1/test_ipld_knowledge_graph.py::TestIPLDKnowledgeGraph::test_query", "type": "TestCaseFunction", "lineno": 139, "deselected": true}, {"nodeid": "test/phase1/test_ipld_knowledge_graph.py::TestIPLDKnowledgeGraph::test_vector_augmented_query", "type": "TestCaseFunction", "lineno": 195, "deselected": true}]}, {"nodeid": "test/phase1/test_ipld_knowledge_graph.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_ipld_knowledge_graph.py::TestIPLDKnowledgeGraph", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_ipld_storage.py::TestIPLDStorage", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_ipld_storage.py::TestIPLDStorage::test_car_export_import", "type": "TestCaseFunction", "lineno": 118, "deselected": true}, {"nodeid": "test/phase1/test_ipld_storage.py::TestIPLDStorage::test_store_and_get", "type": "TestCaseFunction", "lineno": 78, "deselected": true}, {"nodeid": "test/phase1/test_ipld_storage.py::TestIPLDStorage::test_store_structured_data", "type": "TestCaseFunction", "lineno": 149, "deselected": true}, {"nodeid": "test/phase1/test_ipld_storage.py::TestIPLDStorage::test_store_with_links", "type": "TestCaseFunction", "lineno": 95, "deselected": true}]}, {"nodeid": "test/phase1/test_ipld_storage.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_ipld_storage.py::TestIPLDStorage", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore::test_add_vectors", "type": "TestCaseFunction", "lineno": 57, "deselected": true}, {"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore::test_delete_vectors", "type": "TestCaseFunction", "lineno": 162, "deselected": true}, {"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore::test_export_import_car", "type": "TestCaseFunction", "lineno": 189, "deselected": true}, {"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore::test_filter_search", "type": "TestCaseFunction", "lineno": 227, "deselected": true}, {"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore::test_search_cosine", "type": "TestCaseFunction", "lineno": 89, "deselected": true}, {"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore::test_search_l2", "type": "TestCaseFunction", "lineno": 112, "deselected": true}, {"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore::test_update_metadata", "type": "TestCaseFunction", "lineno": 139, "deselected": true}]}, {"nodeid": "test/phase1/test_ipld_vector_store.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_ipld_vector_store.py::TestIPLDVectorStore", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestEntity", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_knowledge_graph.py::TestEntity::test_entity_creation", "type": "TestCaseFunction", "lineno": 26, "deselected": true}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestEntity::test_entity_to_dict", "type": "TestCaseFunction", "lineno": 43, "deselected": true}]}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestRelationship", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_knowledge_graph.py::TestRelationship::test_relationship_creation", "type": "TestCaseFunction", "lineno": 71, "deselected": true}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestRelationship::test_relationship_to_dict", "type": "TestCaseFunction", "lineno": 94, "deselected": true}]}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraph", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraph::test_add_entity", "type": "TestCaseFunction", "lineno": 135, "deselected": true}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraph::test_add_relationship", "type": "TestCaseFunction", "lineno": 153, "deselected": true}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraph::test_serialization", "type": "TestCaseFunction", "lineno": 185, "deselected": true}]}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraphExtractor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraphExtractor::test_entity_extraction", "type": "TestCaseFunction", "lineno": 226, "deselected": true}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraphExtractor::test_full_extraction", "type": "TestCaseFunction", "lineno": 277, "deselected": true}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraphExtractor::test_relationship_extraction", "type": "TestCaseFunction", "lineno": 251, "deselected": true}]}, {"nodeid": "test/phase1/test_knowledge_graph.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_knowledge_graph.py::TestEntity", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestRelationship", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraph", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_knowledge_graph.py::TestKnowledgeGraphExtractor", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_libp2p_integration.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/phase1/test_libp2p_integration.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/phase1/test_libp2p_integration.py:21: in <module>\n    from ipfs_datasets_py.libp2p_kit import (\nE   ImportError: cannot import name 'LibP2PNode' from 'ipfs_datasets_py.libp2p_kit' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/libp2p_kit.py)"}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_analyze_evidence_chain", "type": "TestCaseFunction", "lineno": 56, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_analyze_evidence_chain_error_handling", "type": "TestCaseFunction", "lineno": 95, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_analyze_transitive_relationships", "type": "TestCaseFunction", "lineno": 194, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_domain_specific_formatting", "type": "TestCaseFunction", "lineno": 334, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_domain_specific_schema_generation", "type": "TestCaseFunction", "lineno": 264, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_generate_deep_inference", "type": "TestCaseFunction", "lineno": 156, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_identify_knowledge_gaps", "type": "TestCaseFunction", "lineno": 134, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_result_enhancement", "type": "TestCaseFunction", "lineno": 377, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor::test_synthesize_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 215, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestReasoningEnhancer", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestReasoningEnhancer::test_enhance_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 533, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestReasoningEnhancer::test_enhance_document_connections", "type": "TestCaseFunction", "lineno": 465, "deselected": true}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestReasoningEnhancer::test_format_connections_for_llm", "type": "TestCaseFunction", "lineno": 588, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestGraphRAGLLMProcessor", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py::TestReasoningEnhancer", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_llm_integration.py::TestAdaptivePrompting", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_integration.py::TestAdaptivePrompting::test_performance_tracking", "type": "TestCaseFunction", "lineno": 122, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestAdaptivePrompting::test_rule_based_selection", "type": "TestCaseFunction", "lineno": 80, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestAdaptivePrompting::test_template_selection_basic", "type": "TestCaseFunction", "lineno": 59, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_integration.py::TestDomainSpecificProcessor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_integration.py::TestDomainSpecificProcessor::test_context_enhancement", "type": "TestCaseFunction", "lineno": 245, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestDomainSpecificProcessor::test_domain_detection", "type": "TestCaseFunction", "lineno": 197, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestDomainSpecificProcessor::test_domain_specific_template_selection", "type": "TestCaseFunction", "lineno": 269, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_integration.py::TestPerformanceMonitor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_integration.py::TestPerformanceMonitor::test_error_tracking", "type": "TestCaseFunction", "lineno": 418, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestPerformanceMonitor::test_latency_percentiles", "type": "TestCaseFunction", "lineno": 442, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestPerformanceMonitor::test_model_metrics", "type": "TestCaseFunction", "lineno": 394, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestPerformanceMonitor::test_recording_interactions", "type": "TestCaseFunction", "lineno": 325, "deselected": true}, {"nodeid": "test/phase1/test_llm_integration.py::TestPerformanceMonitor::test_task_metrics", "type": "TestCaseFunction", "lineno": 369, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_integration.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_integration.py::TestAdaptivePrompting", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_llm_integration.py::TestDomainSpecificProcessor", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_llm_integration.py::TestPerformanceMonitor", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_llm_reasoning_tracer.py::TestReasoningTrace", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_reasoning_tracer.py::TestReasoningTrace::test_add_edge", "type": "TestCaseFunction", "lineno": 55, "deselected": true}, {"nodeid": "test/phase1/test_llm_reasoning_tracer.py::TestReasoningTrace::test_add_edge_invalid_node", "type": "TestCaseFunction", "lineno": 81, "deselected": true}, {"nodeid": "test/phase1/test_llm_reasoning_tracer.py::TestReasoningTrace::test_add_node", "type": "TestCaseFunction", "lineno": 30, "deselected": true}, {"nodeid": "test/phase1/test_llm_reasoning_tracer.py::TestReasoningTrace::test_to_dict_and_from_dict", "type": "TestCaseFunction", "lineno": 105, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_reasoning_tracer.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_reasoning_tracer.py::TestReasoningTrace", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaRegistry", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaRegistry::test_register_and_get_schema", "type": "TestCaseFunction", "lineno": 55, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaRegistry::test_schema_versioning", "type": "TestCaseFunction", "lineno": 75, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaValidator", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaValidator::test_non_existent_schema", "type": "TestCaseFunction", "lineno": 169, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaValidator::test_validation_failure", "type": "TestCaseFunction", "lineno": 140, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaValidator::test_validation_success", "type": "TestCaseFunction", "lineno": 124, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticAugmenter", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticAugmenter::test_basic_augmentation", "type": "TestCaseFunction", "lineno": 186, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticAugmenter::test_cross_document_reasoning_augmentation", "type": "TestCaseFunction", "lineno": 204, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticAugmenter::test_evidence_chain_augmentation", "type": "TestCaseFunction", "lineno": 228, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticValidator", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticValidator::test_invalid_processing", "type": "TestCaseFunction", "lineno": 296, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticValidator::test_valid_processing", "type": "TestCaseFunction", "lineno": 276, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator::test_explanation_generation", "type": "TestCaseFunction", "lineno": 618, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator::test_string_similarity", "type": "TestCaseFunction", "lineno": 593, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator::test_validate_bidirectional_relationship", "type": "TestCaseFunction", "lineno": 569, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator::test_validate_entity_failure", "type": "TestCaseFunction", "lineno": 518, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator::test_validate_entity_success", "type": "TestCaseFunction", "lineno": 499, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator::test_validate_relationship_failure", "type": "TestCaseFunction", "lineno": 553, "deselected": true}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator::test_validate_relationship_success", "type": "TestCaseFunction", "lineno": 537, "deselected": true}]}, {"nodeid": "test/phase1/test_llm_semantic_validation.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaRegistry", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSchemaValidator", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticAugmenter", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSemanticValidator", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_llm_semantic_validation.py::TestSPARQLValidator", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_async_timed_decorator", "type": "TestCaseFunction", "lineno": 272, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_configuration", "type": "TestCaseFunction", "lineno": 96, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_custom_labels", "type": "TestCaseFunction", "lineno": 405, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_disabled_monitoring", "type": "TestCaseFunction", "lineno": 363, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_error_handling", "type": "TestCaseFunction", "lineno": 342, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_exception_logging", "type": "TestCaseFunction", "lineno": 419, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_logging", "type": "TestCaseFunction", "lineno": 112, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_logging_with_context", "type": "TestCaseFunction", "lineno": 126, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_metrics_counter", "type": "TestCaseFunction", "lineno": 139, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_metrics_event", "type": "TestCaseFunction", "lineno": 195, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_metrics_gauge", "type": "TestCaseFunction", "lineno": 157, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_metrics_timer", "type": "TestCaseFunction", "lineno": 177, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_metrics_writing", "type": "TestCaseFunction", "lineno": 297, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_monitor_context", "type": "TestCaseFunction", "lineno": 229, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_multiple_loggers", "type": "TestCaseFunction", "lineno": 388, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_operation_tracking", "type": "TestCaseFunction", "lineno": 213, "deselected": true}, {"nodeid": "test/phase1/test_monitoring.py::TestMonitoring::test_timed_decorator", "type": "TestCaseFunction", "lineno": 246, "deselected": true}]}, {"nodeid": "test/phase1/test_monitoring.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_monitoring.py::TestMonitoring", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_batch_processing", "type": "TestCaseFunction", "lineno": 69, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_batch_processor_factory", "type": "TestCaseFunction", "lineno": 283, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_cached_encoding", "type": "TestCaseFunction", "lineno": 250, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_car_streaming", "type": "TestCaseFunction", "lineno": 139, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_ipld_storage_batch_methods", "type": "TestCaseFunction", "lineno": 100, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_large_batch_processing", "type": "TestCaseFunction", "lineno": 293, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_lru_cache", "type": "TestCaseFunction", "lineno": 218, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_node_optimization", "type": "TestCaseFunction", "lineno": 173, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_optimized_decoder", "type": "TestCaseFunction", "lineno": 52, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_optimized_encoder", "type": "TestCaseFunction", "lineno": 36, "deselected": true}, {"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD::test_performance_stats", "type": "TestCaseFunction", "lineno": 197, "deselected": true}]}, {"nodeid": "test/phase1/test_optimized_ipld.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_optimized_ipld.py::TestOptimizedIPLD", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_phase1.py::TestIPLDStorage", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestIPLDStorage::test_car_export_import", "type": "TestCaseFunction", "lineno": 118, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestIPLDStorage::test_store_and_get", "type": "TestCaseFunction", "lineno": 78, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestIPLDStorage::test_store_structured_data", "type": "TestCaseFunction", "lineno": 149, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestIPLDStorage::test_store_with_links", "type": "TestCaseFunction", "lineno": 95, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestDatasetSerialization", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestDatasetSerialization::test_arrow_serialization", "type": "TestCaseFunction", "lineno": 98, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestDatasetSerialization::test_huggingface_serialization", "type": "TestCaseFunction", "lineno": 131, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestDatasetSerialization::test_large_dataset_streaming", "type": "TestCaseFunction", "lineno": 164, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestCarConversion", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestCarConversion::test_arrow_table_to_car", "type": "TestCaseFunction", "lineno": 79, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestCarConversion::test_car_to_arrow_table", "type": "TestCaseFunction", "lineno": 103, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestCarConversion::test_car_to_parquet_conversion", "type": "TestCaseFunction", "lineno": 151, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestCarConversion::test_parquet_to_car_conversion", "type": "TestCaseFunction", "lineno": 125, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestCarConversion::test_streaming_conversion", "type": "TestCaseFunction", "lineno": 183, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration::test_create_warc", "type": "TestCaseFunction", "lineno": 117, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration::test_extract_dataset_arrow", "type": "TestCaseFunction", "lineno": 167, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration::test_extract_dataset_huggingface", "type": "TestCaseFunction", "lineno": 191, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration::test_index_warc", "type": "TestCaseFunction", "lineno": 143, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration::test_link_extraction", "type": "TestCaseFunction", "lineno": 239, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration::test_text_extraction", "type": "TestCaseFunction", "lineno": 215, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_chunking_strategies", "type": "TestCaseFunction", "lineno": 354, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_get_directory", "type": "TestCaseFunction", "lineno": 318, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_get_file", "type": "TestCaseFunction", "lineno": 285, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_write_directory", "type": "TestCaseFunction", "lineno": 179, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_write_directory_recursive", "type": "TestCaseFunction", "lineno": 202, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_write_directory_to_car", "type": "TestCaseFunction", "lineno": 259, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_write_file", "type": "TestCaseFunction", "lineno": 109, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_write_file_with_chunker", "type": "TestCaseFunction", "lineno": 141, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration::test_write_to_car", "type": "TestCaseFunction", "lineno": 233, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestGraphNode", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestGraphNode::test_edge_properties", "type": "TestCaseFunction", "lineno": 28, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestGraphDataset", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestGraphDataset::test_add_and_get_nodes", "type": "TestCaseFunction", "lineno": 74, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphDataset::test_edge_properties", "type": "TestCaseFunction", "lineno": 94, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphDataset::test_find_paths", "type": "TestCaseFunction", "lineno": 151, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphDataset::test_traversal", "type": "TestCaseFunction", "lineno": 119, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestVectorAugmentedGraphDataset", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestVectorAugmentedGraphDataset::test_graph_rag_search", "type": "TestCaseFunction", "lineno": 210, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestVectorAugmentedGraphDataset::test_node_vector_search", "type": "TestCaseFunction", "lineno": 188, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestVectorAugmentedGraphDataset::test_query_optimization", "type": "TestCaseFunction", "lineno": 239, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestVectorAugmentedGraphDataset::test_vector_partitioning", "type": "TestCaseFunction", "lineno": 264, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGQueryOptimizer", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestGraphRAGQueryOptimizer::test_query_optimization", "type": "TestCaseFunction", "lineno": 319, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGQueryOptimizer::test_query_stats", "type": "TestCaseFunction", "lineno": 300, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestVectorIndexPartitioner", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestVectorIndexPartitioner::test_partitioning", "type": "TestCaseFunction", "lineno": 372, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestVectorIndexPartitioner::test_search", "type": "TestCaseFunction", "lineno": 390, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_compare_subgraphs", "type": "TestCaseFunction", "lineno": 547, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 923, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_cross_modal_linking", "type": "TestCaseFunction", "lineno": 760, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_expand_query", "type": "TestCaseFunction", "lineno": 367, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_explain_path", "type": "TestCaseFunction", "lineno": 194, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_find_entity_clusters", "type": "TestCaseFunction", "lineno": 332, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_find_similar_connected_nodes", "type": "TestCaseFunction", "lineno": 46, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_generate_contextual_embeddings", "type": "TestCaseFunction", "lineno": 491, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_hierarchical_path_search", "type": "TestCaseFunction", "lineno": 870, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_hybrid_structured_semantic_search", "type": "TestCaseFunction", "lineno": 217, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_incremental_graph_update", "type": "TestCaseFunction", "lineno": 145, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_knowledge_graph_completion", "type": "TestCaseFunction", "lineno": 685, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_logical_query", "type": "TestCaseFunction", "lineno": 102, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_multi_hop_inference", "type": "TestCaseFunction", "lineno": 297, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_rank_nodes_by_centrality", "type": "TestCaseFunction", "lineno": 266, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_resolve_entities", "type": "TestCaseFunction", "lineno": 408, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_schema_based_validation", "type": "TestCaseFunction", "lineno": 818, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_semantic_subgraph", "type": "TestCaseFunction", "lineno": 77, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods::test_temporal_graph_analysis", "type": "TestCaseFunction", "lineno": 622, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestEntity", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestEntity::test_entity_creation", "type": "TestCaseFunction", "lineno": 26, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestEntity::test_entity_to_dict", "type": "TestCaseFunction", "lineno": 43, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestRelationship", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestRelationship::test_relationship_creation", "type": "TestCaseFunction", "lineno": 71, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestRelationship::test_relationship_to_dict", "type": "TestCaseFunction", "lineno": 94, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraph", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraph::test_add_entity", "type": "TestCaseFunction", "lineno": 135, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraph::test_add_relationship", "type": "TestCaseFunction", "lineno": 153, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraph::test_serialization", "type": "TestCaseFunction", "lineno": 185, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraphExtractor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraphExtractor::test_entity_extraction", "type": "TestCaseFunction", "lineno": 226, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraphExtractor::test_full_extraction", "type": "TestCaseFunction", "lineno": 277, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraphExtractor::test_relationship_extraction", "type": "TestCaseFunction", "lineno": 251, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration::test_different_wikipedia_pages", "type": "TestCaseFunction", "lineno": 171, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration::test_extract_and_validate_wikipedia_graph", "type": "TestCaseFunction", "lineno": 115, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration::test_extract_from_wikipedia", "type": "TestCaseFunction", "lineno": 30, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration::test_temperature_comparison", "type": "TestCaseFunction", "lineno": 259, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration::test_validate_against_wikidata", "type": "TestCaseFunction", "lineno": 60, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration::test_wikipedia_tracing_functionality", "type": "TestCaseFunction", "lineno": 193, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestGraphRAGIntegration::test_skip", "type": "TestCaseFunction", "lineno": 99, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestAdaptivePrompting", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestAdaptivePrompting::test_performance_tracking", "type": "TestCaseFunction", "lineno": 122, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdaptivePrompting::test_rule_based_selection", "type": "TestCaseFunction", "lineno": 80, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAdaptivePrompting::test_template_selection_basic", "type": "TestCaseFunction", "lineno": 59, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestDomainSpecificProcessor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestDomainSpecificProcessor::test_context_enhancement", "type": "TestCaseFunction", "lineno": 245, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestDomainSpecificProcessor::test_domain_detection", "type": "TestCaseFunction", "lineno": 197, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestDomainSpecificProcessor::test_domain_specific_template_selection", "type": "TestCaseFunction", "lineno": 269, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestPerformanceMonitor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestPerformanceMonitor::test_error_tracking", "type": "TestCaseFunction", "lineno": 418, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestPerformanceMonitor::test_latency_percentiles", "type": "TestCaseFunction", "lineno": 442, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestPerformanceMonitor::test_model_metrics", "type": "TestCaseFunction", "lineno": 394, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestPerformanceMonitor::test_recording_interactions", "type": "TestCaseFunction", "lineno": 325, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestPerformanceMonitor::test_task_metrics", "type": "TestCaseFunction", "lineno": 369, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_analyze_evidence_chain", "type": "TestCaseFunction", "lineno": 56, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_analyze_evidence_chain_error_handling", "type": "TestCaseFunction", "lineno": 95, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_analyze_transitive_relationships", "type": "TestCaseFunction", "lineno": 194, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_domain_specific_formatting", "type": "TestCaseFunction", "lineno": 334, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_domain_specific_schema_generation", "type": "TestCaseFunction", "lineno": 264, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_generate_deep_inference", "type": "TestCaseFunction", "lineno": 156, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_identify_knowledge_gaps", "type": "TestCaseFunction", "lineno": 134, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_result_enhancement", "type": "TestCaseFunction", "lineno": 377, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor::test_synthesize_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 215, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestReasoningEnhancer", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestReasoningEnhancer::test_enhance_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 533, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestReasoningEnhancer::test_enhance_document_connections", "type": "TestCaseFunction", "lineno": 465, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestReasoningEnhancer::test_format_connections_for_llm", "type": "TestCaseFunction", "lineno": 588, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestSchemaRegistry", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestSchemaRegistry::test_register_and_get_schema", "type": "TestCaseFunction", "lineno": 55, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestSchemaRegistry::test_schema_versioning", "type": "TestCaseFunction", "lineno": 75, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestSchemaValidator", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestSchemaValidator::test_non_existent_schema", "type": "TestCaseFunction", "lineno": 169, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestSchemaValidator::test_validation_failure", "type": "TestCaseFunction", "lineno": 140, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestSchemaValidator::test_validation_success", "type": "TestCaseFunction", "lineno": 124, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestSemanticAugmenter", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestSemanticAugmenter::test_basic_augmentation", "type": "TestCaseFunction", "lineno": 186, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestSemanticAugmenter::test_cross_document_reasoning_augmentation", "type": "TestCaseFunction", "lineno": 204, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestSemanticAugmenter::test_evidence_chain_augmentation", "type": "TestCaseFunction", "lineno": 228, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestSemanticValidator", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestSemanticValidator::test_invalid_processing", "type": "TestCaseFunction", "lineno": 296, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestSemanticValidator::test_valid_processing", "type": "TestCaseFunction", "lineno": 276, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestCrossDocumentReasoning", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestCrossDocumentReasoning::test_skip", "type": "TestCaseFunction", "lineno": 165, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestAuditLogging", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestAuditLogging::test_basic_logging", "type": "TestCaseFunction", "lineno": 151, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAuditLogging::test_context_application", "type": "TestCaseFunction", "lineno": 173, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAuditLogging::test_convenience_methods", "type": "TestCaseFunction", "lineno": 218, "deselected": true}, {"nodeid": "test/phase1/test_phase1.py::TestAuditLogging::test_filtering", "type": "TestCaseFunction", "lineno": 245, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py::TestIPFSKnnIndex", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestIPFSKnnIndex::test_index_add_search", "type": "TestCaseFunction", "lineno": 256, "deselected": true}]}, {"nodeid": "test/phase1/test_phase1.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_phase1.py::TestIPLDStorage", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestDatasetSerialization", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestCarConversion", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestWebArchiveIntegration", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestUnixFSIntegration", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestGraphNode", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestGraphDataset", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestVectorAugmentedGraphDataset", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGQueryOptimizer", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestVectorIndexPartitioner", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestAdvancedGraphRAGMethods", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestEntity", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestRelationship", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraph", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestKnowledgeGraphExtractor", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestWikipediaIntegration", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGIntegration", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestAdaptivePrompting", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestDomainSpecificProcessor", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestPerformanceMonitor", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestGraphRAGLLMProcessor", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestReasoningEnhancer", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestSchemaRegistry", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestSchemaValidator", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestSemanticAugmenter", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestSemanticValidator", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestCrossDocumentReasoning", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestAuditLogging", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_phase1.py::TestIPFSKnnIndex", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_basic_query_optimization", "type": "TestCaseFunction", "lineno": 228, "deselected": true}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_factory_function", "type": "TestCaseFunction", "lineno": 512, "deselected": true}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_graph_query_optimization", "type": "TestCaseFunction", "lineno": 311, "deselected": true}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_hybrid_query_optimization", "type": "TestCaseFunction", "lineno": 361, "deselected": true}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_index_registry", "type": "TestCaseFunction", "lineno": 470, "deselected": true}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_lru_cache", "type": "TestCaseFunction", "lineno": 434, "deselected": true}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_query_stats_collection", "type": "TestCaseFunction", "lineno": 405, "deselected": true}, {"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer::test_vector_index_optimization", "type": "TestCaseFunction", "lineno": 272, "deselected": true}]}, {"nodeid": "test/phase1/test_query_optimizer.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_query_optimizer.py::TestQueryOptimizer", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_rag_query_graphrag_integration.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/phase1/test_rag_query_graphrag_integration.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/phase1/test_rag_query_graphrag_integration.py:14: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'UnifiedGraphRAGQueryOptimizer' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/phase1/test_rag_query_optimizer.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/phase1/test_rag_query_optimizer.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/phase1/test_rag_query_optimizer.py:16: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'GraphRAGQueryStats' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/phase1/test_resilient_operations.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/phase1/test_resilient_operations.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/phase1/test_resilient_operations.py:20: in <module>\n    from ipfs_datasets_py.resilient_operations import (\nipfs_datasets_py/resilient_operations.py:35: in <module>\n    from ipfs_datasets_py.libp2p_kit import (\nE   ImportError: cannot import name 'P2PError' from 'ipfs_datasets_py.libp2p_kit' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/libp2p_kit.py)"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingStats", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingStats::test_stats_collection", "type": "TestCaseFunction", "lineno": 55, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingCache", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingCache::test_cache_operations", "type": "TestCaseFunction", "lineno": 97, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestParquetStreamingLoader", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestParquetStreamingLoader::test_parquet_loading", "type": "TestCaseFunction", "lineno": 154, "deselected": true}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestParquetStreamingLoader::test_to_arrow_table", "type": "TestCaseFunction", "lineno": 191, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestCSVStreamingLoader", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestCSVStreamingLoader::test_csv_loading", "type": "TestCaseFunction", "lineno": 225, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestJSONStreamingLoader", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestJSONStreamingLoader::test_json_loading", "type": "TestCaseFunction", "lineno": 271, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestHuggingFaceStreamingLoader", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestHuggingFaceStreamingLoader::test_huggingface_loading", "type": "TestCaseFunction", "lineno": 309, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestMemoryMappedVectorLoader", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestMemoryMappedVectorLoader::test_memory_mapped_vectors", "type": "TestCaseFunction", "lineno": 338, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingDataset", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingDataset::test_streaming_dataset", "type": "TestCaseFunction", "lineno": 431, "deselected": true}]}, {"nodeid": "test/phase1/test_streaming_data_loader.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingStats", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingCache", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestParquetStreamingLoader", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestCSVStreamingLoader", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestJSONStreamingLoader", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestHuggingFaceStreamingLoader", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestMemoryMappedVectorLoader", "type": "UnitTestCase"}, {"nodeid": "test/phase1/test_streaming_data_loader.py::TestStreamingDataset", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_chunking_strategies", "type": "TestCaseFunction", "lineno": 354, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_get_directory", "type": "TestCaseFunction", "lineno": 318, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_get_file", "type": "TestCaseFunction", "lineno": 285, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_write_directory", "type": "TestCaseFunction", "lineno": 179, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_write_directory_recursive", "type": "TestCaseFunction", "lineno": 202, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_write_directory_to_car", "type": "TestCaseFunction", "lineno": 259, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_write_file", "type": "TestCaseFunction", "lineno": 109, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_write_file_with_chunker", "type": "TestCaseFunction", "lineno": 141, "deselected": true}, {"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration::test_write_to_car", "type": "TestCaseFunction", "lineno": 233, "deselected": true}]}, {"nodeid": "test/phase1/test_unixfs_integration.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_unixfs_integration.py::TestUnixFSIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration::test_create_warc", "type": "TestCaseFunction", "lineno": 117, "deselected": true}, {"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration::test_extract_dataset_arrow", "type": "TestCaseFunction", "lineno": 167, "deselected": true}, {"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration::test_extract_dataset_huggingface", "type": "TestCaseFunction", "lineno": 191, "deselected": true}, {"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration::test_index_warc", "type": "TestCaseFunction", "lineno": 143, "deselected": true}, {"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration::test_link_extraction", "type": "TestCaseFunction", "lineno": 239, "deselected": true}, {"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration::test_text_extraction", "type": "TestCaseFunction", "lineno": 215, "deselected": true}]}, {"nodeid": "test/phase1/test_web_archive_integration.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_web_archive_integration.py::TestWebArchiveIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration::test_different_wikipedia_pages", "type": "TestCaseFunction", "lineno": 171, "deselected": true}, {"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration::test_extract_and_validate_wikipedia_graph", "type": "TestCaseFunction", "lineno": 115, "deselected": true}, {"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration::test_extract_from_wikipedia", "type": "TestCaseFunction", "lineno": 30, "deselected": true}, {"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration::test_temperature_comparison", "type": "TestCaseFunction", "lineno": 259, "deselected": true}, {"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration::test_validate_against_wikidata", "type": "TestCaseFunction", "lineno": 60, "deselected": true}, {"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration::test_wikipedia_tracing_functionality", "type": "TestCaseFunction", "lineno": 193, "deselected": true}]}, {"nodeid": "test/phase1/test_wikipedia_integration.py", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_wikipedia_integration.py::TestWikipediaIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/phase1", "outcome": "passed", "result": [{"nodeid": "test/phase1/test_adaptive_security.py", "type": "Module"}, {"nodeid": "test/phase1/test_admin_dashboard.py", "type": "Module"}, {"nodeid": "test/phase1/test_advanced_graphrag.py", "type": "Module"}, {"nodeid": "test/phase1/test_advanced_query_optimization.py", "type": "Module"}, {"nodeid": "test/phase1/test_audit_anomaly_detection.py", "type": "Module"}, {"nodeid": "test/phase1/test_audit_logging.py", "type": "Module"}, {"nodeid": "test/phase1/test_car_conversion.py", "type": "Module"}, {"nodeid": "test/phase1/test_cross_document_reasoning.py", "type": "Module"}, {"nodeid": "test/phase1/test_data_provenance.py", "type": "Module"}, {"nodeid": "test/phase1/test_data_provenance_enhanced.py", "type": "Module"}, {"nodeid": "test/phase1/test_dataset_serialization.py", "type": "Module"}, {"nodeid": "test/phase1/test_graphrag.py", "type": "Module"}, {"nodeid": "test/phase1/test_graphrag_integration.py", "type": "Module"}, {"nodeid": "test/phase1/test_integrated_validation.py", "type": "Module"}, {"nodeid": "test/phase1/test_ipld_knowledge_graph.py", "type": "Module"}, {"nodeid": "test/phase1/test_ipld_storage.py", "type": "Module"}, {"nodeid": "test/phase1/test_ipld_vector_store.py", "type": "Module"}, {"nodeid": "test/phase1/test_knowledge_graph.py", "type": "Module"}, {"nodeid": "test/phase1/test_libp2p_integration.py", "type": "Module"}, {"nodeid": "test/phase1/test_llm_graphrag_processor.py", "type": "Module"}, {"nodeid": "test/phase1/test_llm_integration.py", "type": "Module"}, {"nodeid": "test/phase1/test_llm_reasoning_tracer.py", "type": "Module"}, {"nodeid": "test/phase1/test_llm_semantic_validation.py", "type": "Module"}, {"nodeid": "test/phase1/test_monitoring.py", "type": "Module"}, {"nodeid": "test/phase1/test_optimized_ipld.py", "type": "Module"}, {"nodeid": "test/phase1/test_phase1.py", "type": "Module"}, {"nodeid": "test/phase1/test_query_optimizer.py", "type": "Module"}, {"nodeid": "test/phase1/test_rag_query_graphrag_integration.py", "type": "Module"}, {"nodeid": "test/phase1/test_rag_query_optimizer.py", "type": "Module"}, {"nodeid": "test/phase1/test_resilient_operations.py", "type": "Module"}, {"nodeid": "test/phase1/test_streaming_data_loader.py", "type": "Module"}, {"nodeid": "test/phase1/test_unixfs_integration.py", "type": "Module"}, {"nodeid": "test/phase1/test_web_archive_integration.py", "type": "Module"}, {"nodeid": "test/phase1/test_wikipedia_integration.py", "type": "Module"}]}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_create_integrated_dashboard", "type": "TestCaseFunction", "lineno": 140, "deselected": true}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_create_provenance_audit_timeline", "type": "TestCaseFunction", "lineno": 105, "deselected": true}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_create_provenance_metrics_comparison", "type": "TestCaseFunction", "lineno": 123, "deselected": true}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_factory_function", "type": "TestCaseFunction", "lineno": 207, "deselected": true}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_get_audit_events_for_entities", "type": "TestCaseFunction", "lineno": 183, "deselected": true}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_get_provenance_events", "type": "TestCaseFunction", "lineno": 171, "deselected": true}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_get_provenance_metrics", "type": "TestCaseFunction", "lineno": 195, "deselected": true}, {"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard::test_initialization", "type": "TestCaseFunction", "lineno": 93, "deselected": true}]}, {"nodeid": "test/test_audit_provenance_dashboard.py", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_dashboard.py::TestAuditProvenanceDashboard", "type": "UnitTestCase"}]}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration::test_audit_from_provenance_source_record", "type": "TestCaseFunction", "lineno": 284, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration::test_audit_from_provenance_transformation_record", "type": "TestCaseFunction", "lineno": 310, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration::test_link_audit_to_provenance", "type": "TestCaseFunction", "lineno": 402, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration::test_provenance_from_audit_event_data_access", "type": "TestCaseFunction", "lineno": 337, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration::test_provenance_from_audit_event_data_modification", "type": "TestCaseFunction", "lineno": 367, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration::test_setup_audit_event_listener", "type": "TestCaseFunction", "lineno": 427, "deselected": true}]}, {"nodeid": "test/test_audit_provenance_integration.py::TestIntegratedComplianceReporting", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_integration.py::TestIntegratedComplianceReporting::test_generate_integrated_compliance_report_function", "type": "TestCaseFunction", "lineno": 546, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestIntegratedComplianceReporting::test_generate_report_with_cross_document_analysis", "type": "TestCaseFunction", "lineno": 503, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestIntegratedComplianceReporting::test_generate_report_without_cross_document_analysis", "type": "TestCaseFunction", "lineno": 530, "deselected": true}]}, {"nodeid": "test/test_audit_provenance_integration.py::TestProvenanceAuditSearch", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_integration.py::TestProvenanceAuditSearch::test_search_audit_only", "type": "TestCaseFunction", "lineno": 658, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestProvenanceAuditSearch::test_search_provenance_only", "type": "TestCaseFunction", "lineno": 677, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestProvenanceAuditSearch::test_search_with_correlation", "type": "TestCaseFunction", "lineno": 617, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestProvenanceAuditSearch::test_search_without_correlation", "type": "TestCaseFunction", "lineno": 696, "deselected": true}]}, {"nodeid": "test/test_audit_provenance_integration.py::TestEnhancedIntegration", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_integration.py::TestEnhancedIntegration::test_audit_context_with_lineage", "type": "TestCaseFunction", "lineno": 857, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestEnhancedIntegration::test_cross_document_lineage_with_audit", "type": "TestCaseFunction", "lineno": 797, "deselected": true}, {"nodeid": "test/test_audit_provenance_integration.py::TestEnhancedIntegration::test_lineage_analysis_with_audit_integration", "type": "TestCaseFunction", "lineno": 922, "deselected": true}]}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditFunctionDecorator", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_integration.py::TestAuditFunctionDecorator::test_audit_decorator", "type": "TestCaseFunction", "lineno": 1108, "deselected": true}]}, {"nodeid": "test/test_audit_provenance_integration.py", "outcome": "passed", "result": [{"nodeid": "test/test_audit_provenance_integration.py::TestAuditProvenanceIntegration", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_provenance_integration.py::TestIntegratedComplianceReporting", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_provenance_integration.py::TestProvenanceAuditSearch", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_provenance_integration.py::TestEnhancedIntegration", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_provenance_integration.py::TestAuditFunctionDecorator", "type": "UnitTestCase"}]}, {"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector", "outcome": "passed", "result": [{"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector::test_calculate_risk_scores", "type": "TestCaseFunction", "lineno": 205, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector::test_detect_access_patterns", "type": "TestCaseFunction", "lineno": 157, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector::test_detect_authentication_patterns", "type": "TestCaseFunction", "lineno": 123, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector::test_detect_compliance_patterns", "type": "TestCaseFunction", "lineno": 195, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector::test_detect_system_patterns", "type": "TestCaseFunction", "lineno": 187, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector::test_get_anomalies", "type": "TestCaseFunction", "lineno": 224, "deselected": true}]}, {"nodeid": "test/test_audit_reporting.py::TestAuditComplianceAnalyzer", "outcome": "passed", "result": [{"nodeid": "test/test_audit_reporting.py::TestAuditComplianceAnalyzer::test_analyze_compliance", "type": "TestCaseFunction", "lineno": 289, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditComplianceAnalyzer::test_get_compliance_summary", "type": "TestCaseFunction", "lineno": 330, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditComplianceAnalyzer::test_specific_compliance_checks", "type": "TestCaseFunction", "lineno": 312, "deselected": true}]}, {"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator", "outcome": "passed", "result": [{"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator::test_export_report_html", "type": "TestCaseFunction", "lineno": 667, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator::test_export_report_json", "type": "TestCaseFunction", "lineno": 643, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator::test_generate_compliance_report", "type": "TestCaseFunction", "lineno": 514, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator::test_generate_comprehensive_report", "type": "TestCaseFunction", "lineno": 615, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator::test_generate_operational_report", "type": "TestCaseFunction", "lineno": 584, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator::test_generate_security_report", "type": "TestCaseFunction", "lineno": 467, "deselected": true}]}, {"nodeid": "test/test_audit_reporting.py::TestSetupFunctions", "outcome": "passed", "result": [{"nodeid": "test/test_audit_reporting.py::TestSetupFunctions::test_generate_comprehensive_audit_report", "type": "TestCaseFunction", "lineno": 729, "deselected": true}, {"nodeid": "test/test_audit_reporting.py::TestSetupFunctions::test_setup_audit_reporting", "type": "TestCaseFunction", "lineno": 697, "deselected": true}]}, {"nodeid": "test/test_audit_reporting.py", "outcome": "passed", "result": [{"nodeid": "test/test_audit_reporting.py::TestAuditPatternDetector", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_reporting.py::TestAuditComplianceAnalyzer", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_reporting.py::TestAuditReportGenerator", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_reporting.py::TestSetupFunctions", "type": "UnitTestCase"}]}, {"nodeid": "test/test_audit_tools.py::TestGenerateAuditReport", "outcome": "passed", "result": [{"nodeid": "test/test_audit_tools.py::TestGenerateAuditReport::test_generate_audit_report_default", "type": "Coroutine", "lineno": 53, "deselected": true}, {"nodeid": "test/test_audit_tools.py::TestGenerateAuditReport::test_generate_audit_report_with_filters", "type": "Coroutine", "lineno": 83, "deselected": true}]}, {"nodeid": "test/test_audit_tools.py::TestRecordAuditEvent", "outcome": "passed", "result": [{"nodeid": "test/test_audit_tools.py::TestRecordAuditEvent::test_record_audit_event_minimal", "type": "Coroutine", "lineno": 140, "deselected": true}, {"nodeid": "test/test_audit_tools.py::TestRecordAuditEvent::test_record_audit_event_full", "type": "Coroutine", "lineno": 167, "deselected": true}, {"nodeid": "test/test_audit_tools.py::TestRecordAuditEvent::test_record_audit_event_error_handling", "type": "Coroutine", "lineno": 202, "deselected": true}]}, {"nodeid": "test/test_audit_tools.py", "outcome": "passed", "result": [{"nodeid": "test/test_audit_tools.py::TestGenerateAuditReport", "type": "Class"}, {"nodeid": "test/test_audit_tools.py::TestRecordAuditEvent", "type": "Class"}]}, {"nodeid": "test/test_audit_visualization.py::TestAuditMetricsAggregator", "outcome": "passed", "result": [{"nodeid": "test/test_audit_visualization.py::TestAuditMetricsAggregator::test_get_metrics_summary", "type": "TestCaseFunction", "lineno": 167, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditMetricsAggregator::test_get_time_series_data", "type": "TestCaseFunction", "lineno": 186, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditMetricsAggregator::test_process_event", "type": "TestCaseFunction", "lineno": 144, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditMetricsAggregator::test_window_cleanup", "type": "TestCaseFunction", "lineno": 211, "deselected": true}]}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer", "outcome": "passed", "result": [{"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer::test_export_metrics_report_html", "type": "TestCaseFunction", "lineno": 375, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer::test_export_metrics_report_json", "type": "TestCaseFunction", "lineno": 394, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer::test_generate_dashboard_html", "type": "TestCaseFunction", "lineno": 354, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer::test_plot_event_timeline", "type": "TestCaseFunction", "lineno": 317, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer::test_plot_events_by_category", "type": "TestCaseFunction", "lineno": 293, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer::test_plot_events_by_level", "type": "TestCaseFunction", "lineno": 305, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer::test_plot_operation_durations", "type": "TestCaseFunction", "lineno": 333, "deselected": true}]}, {"nodeid": "test/test_audit_visualization.py::TestHelperFunctions", "outcome": "passed", "result": [{"nodeid": "test/test_audit_visualization.py::TestHelperFunctions::test_generate_audit_dashboard", "type": "TestCaseFunction", "lineno": 444, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestHelperFunctions::test_query_audit_timeline", "type": "TestCaseFunction", "lineno": 491, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestHelperFunctions::test_setup_audit_visualization", "type": "TestCaseFunction", "lineno": 425, "deselected": true}]}, {"nodeid": "test/test_audit_visualization.py::TestIntegratedVisualization", "outcome": "passed", "result": [{"nodeid": "test/test_audit_visualization.py::TestIntegratedVisualization::test_create_interactive_audit_trends", "type": "TestCaseFunction", "lineno": 923, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestIntegratedVisualization::test_generate_integrated_dashboard", "type": "TestCaseFunction", "lineno": 636, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestIntegratedVisualization::test_query_audit_timeline", "type": "TestCaseFunction", "lineno": 642, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestIntegratedVisualization::test_security_correlation_visualization", "type": "TestCaseFunction", "lineno": 709, "deselected": true}]}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer", "outcome": "passed", "result": [{"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_error_handling_with_missing_data", "type": "TestCaseFunction", "lineno": 1228, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_generate_learning_metrics_dashboard", "type": "TestCaseFunction", "lineno": 1204, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_metrics_collector_interface_requirements", "type": "TestCaseFunction", "lineno": 1248, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_visualize_learning_cycles_interactive", "type": "TestCaseFunction", "lineno": 1108, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_visualize_learning_cycles_static", "type": "TestCaseFunction", "lineno": 1090, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_visualize_parameter_adaptations_interactive", "type": "TestCaseFunction", "lineno": 1146, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_visualize_parameter_adaptations_static", "type": "TestCaseFunction", "lineno": 1128, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_visualize_strategy_effectiveness_interactive", "type": "TestCaseFunction", "lineno": 1184, "deselected": true}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer::test_visualize_strategy_effectiveness_static", "type": "TestCaseFunction", "lineno": 1166, "deselected": true}]}, {"nodeid": "test/test_audit_visualization.py", "outcome": "passed", "result": [{"nodeid": "test/test_audit_visualization.py::TestAuditMetricsAggregator", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_visualization.py::TestAuditVisualizer", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_visualization.py::TestHelperFunctions", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_visualization.py::TestIntegratedVisualization", "type": "UnitTestCase"}, {"nodeid": "test/test_audit_visualization.py::TestOptimizerLearningMetricsVisualizer", "type": "UnitTestCase"}]}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_analyze_lineage", "type": "TestCaseFunction", "lineno": 374, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_build_lineage_graph", "type": "TestCaseFunction", "lineno": 330, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_create_link", "type": "TestCaseFunction", "lineno": 220, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_export_lineage", "type": "TestCaseFunction", "lineno": 473, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_get_links_for_record", "type": "TestCaseFunction", "lineno": 258, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_integrate_with_provenance_manager", "type": "TestCaseFunction", "lineno": 553, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_verify_link", "type": "TestCaseFunction", "lineno": 521, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage::test_visualize_lineage", "type": "TestCaseFunction", "lineno": 428, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentAuditIntegration", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentAuditIntegration::test_cross_document_insights", "type": "TestCaseFunction", "lineno": 807, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentAuditIntegration::test_integrated_link_creation", "type": "TestCaseFunction", "lineno": 641, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentAuditIntegration::test_lineage_analysis_with_audit", "type": "TestCaseFunction", "lineno": 686, "deselected": true}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentAuditIntegration::test_link_verification", "type": "TestCaseFunction", "lineno": 764, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage.py", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentLineage", "type": "UnitTestCase"}, {"nodeid": "test/test_cross_document_lineage.py::TestCrossDocumentAuditIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestCrossDocumentLineageEnhancer", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_enhanced.py::TestCrossDocumentLineageEnhancer::test_analyze_cross_document_lineage", "type": "TestCaseFunction", "lineno": 134, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestCrossDocumentLineageEnhancer::test_build_enhanced_cross_document_lineage_graph", "type": "TestCaseFunction", "lineno": 80, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestCrossDocumentLineageEnhancer::test_link_cross_document_provenance", "type": "TestCaseFunction", "lineno": 34, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestCrossDocumentLineageEnhancer::test_visualize_enhanced_cross_document_lineage", "type": "TestCaseFunction", "lineno": 104, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestDetailedLineageIntegrator", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_enhanced.py::TestDetailedLineageIntegrator::test_create_unified_lineage_report", "type": "TestCaseFunction", "lineno": 242, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestDetailedLineageIntegrator::test_enrich_lineage_semantics", "type": "TestCaseFunction", "lineno": 225, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestDetailedLineageIntegrator::test_integrate_provenance_with_lineage", "type": "TestCaseFunction", "lineno": 184, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestIntegrationWithProvenanceManager", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_enhanced.py::TestIntegrationWithProvenanceManager::test_create_cross_document_lineage", "type": "TestCaseFunction", "lineno": 319, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage_enhanced.py", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_enhanced.py::TestCrossDocumentLineageEnhancer", "type": "UnitTestCase"}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestDetailedLineageIntegrator", "type": "UnitTestCase"}, {"nodeid": "test/test_cross_document_lineage_enhanced.py::TestIntegrationWithProvenanceManager", "type": "UnitTestCase"}]}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageClasses", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageClasses::test_lineage_link", "type": "TestCaseFunction", "lineno": 70, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageClasses::test_lineage_node", "type": "TestCaseFunction", "lineno": 97, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageClasses::test_lineage_subgraph", "type": "TestCaseFunction", "lineno": 121, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageMetrics", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageMetrics::test_calculate_centrality", "type": "TestCaseFunction", "lineno": 215, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageMetrics::test_calculate_complexity", "type": "TestCaseFunction", "lineno": 243, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageMetrics::test_calculate_dependency_score", "type": "TestCaseFunction", "lineno": 201, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageMetrics::test_calculate_impact_score", "type": "TestCaseFunction", "lineno": 187, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageMetrics::test_identify_critical_paths", "type": "TestCaseFunction", "lineno": 231, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_add_node", "type": "TestCaseFunction", "lineno": 275, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_add_relationship", "type": "TestCaseFunction", "lineno": 299, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_analyze_cross_document_lineage", "type": "TestCaseFunction", "lineno": 406, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_export_import_lineage_graph", "type": "TestCaseFunction", "lineno": 465, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_get_entity_lineage", "type": "TestCaseFunction", "lineno": 382, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_get_lineage", "type": "TestCaseFunction", "lineno": 342, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_visualize_lineage_matplotlib", "type": "TestCaseFunction", "lineno": 422, "deselected": true}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker::test_visualize_lineage_plotly", "type": "TestCaseFunction", "lineno": 443, "deselected": true}]}, {"nodeid": "test/test_cross_document_lineage_implementation.py", "outcome": "passed", "result": [{"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageClasses", "type": "UnitTestCase"}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestLineageMetrics", "type": "UnitTestCase"}, {"nodeid": "test/test_cross_document_lineage_implementation.py::TestCrossDocumentLineageTracker", "type": "UnitTestCase"}]}, {"nodeid": "test/test_dataset_tools.py::TestLoadDataset", "outcome": "passed", "result": [{"nodeid": "test/test_dataset_tools.py::TestLoadDataset::test_load_dataset_from_disk", "type": "Coroutine", "lineno": 37, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestLoadDataset::test_load_dataset_from_huggingface", "type": "Coroutine", "lineno": 56, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestLoadDataset::test_load_dataset_with_config", "type": "Coroutine", "lineno": 74, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestLoadDataset::test_load_dataset_missing_parameters", "type": "Coroutine", "lineno": 93, "deselected": true}]}, {"nodeid": "test/test_dataset_tools.py::TestSaveDataset", "outcome": "passed", "result": [{"nodeid": "test/test_dataset_tools.py::TestSaveDataset::test_save_dataset_to_disk", "type": "Coroutine", "lineno": 116, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestSaveDataset::test_save_dataset_with_format", "type": "Coroutine", "lineno": 135, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestSaveDataset::test_save_dataset_invalid_dataset", "type": "Coroutine", "lineno": 154, "deselected": true}]}, {"nodeid": "test/test_dataset_tools.py::TestProcessDataset", "outcome": "passed", "result": [{"nodeid": "test/test_dataset_tools.py::TestProcessDataset::test_process_dataset_with_text_function", "type": "Coroutine", "lineno": 178, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestProcessDataset::test_process_dataset_batch_processing", "type": "Coroutine", "lineno": 202, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestProcessDataset::test_process_dataset_invalid_function", "type": "Coroutine", "lineno": 231, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestProcessDataset::test_process_dataset_invalid_dataset", "type": "Coroutine", "lineno": 245, "deselected": true}]}, {"nodeid": "test/test_dataset_tools.py::TestConvertDatasetFormat", "outcome": "passed", "result": [{"nodeid": "test/test_dataset_tools.py::TestConvertDatasetFormat::test_convert_dataset_to_csv", "type": "Coroutine", "lineno": 279, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestConvertDatasetFormat::test_convert_dataset_to_json", "type": "Coroutine", "lineno": 307, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestConvertDatasetFormat::test_convert_dataset_to_parquet", "type": "Coroutine", "lineno": 336, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestConvertDatasetFormat::test_convert_dataset_invalid_format", "type": "Coroutine", "lineno": 364, "deselected": true}, {"nodeid": "test/test_dataset_tools.py::TestConvertDatasetFormat::test_convert_dataset_invalid_dataset", "type": "Coroutine", "lineno": 377, "deselected": true}]}, {"nodeid": "test/test_dataset_tools.py", "outcome": "passed", "result": [{"nodeid": "test/test_dataset_tools.py::TestLoadDataset", "type": "Class"}, {"nodeid": "test/test_dataset_tools.py::TestSaveDataset", "type": "Class"}, {"nodeid": "test/test_dataset_tools.py::TestProcessDataset", "type": "Class"}, {"nodeid": "test/test_dataset_tools.py::TestConvertDatasetFormat", "type": "Class"}]}, {"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage", "outcome": "passed", "result": [{"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage::test_analyze_cross_document_lineage", "type": "TestCaseFunction", "lineno": 214, "deselected": true}, {"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage::test_build_enhanced_cross_document_lineage_graph", "type": "TestCaseFunction", "lineno": 190, "deselected": true}, {"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage::test_export_cross_document_lineage", "type": "TestCaseFunction", "lineno": 289, "deselected": true}, {"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage::test_impact_analyzer", "type": "TestCaseFunction", "lineno": 341, "deselected": true}, {"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage::test_link_cross_document_provenance_with_enhanced_features", "type": "TestCaseFunction", "lineno": 134, "deselected": true}, {"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage::test_visualize_enhanced_cross_document_lineage", "type": "TestCaseFunction", "lineno": 245, "deselected": true}]}, {"nodeid": "test/test_enhanced_cross_document_lineage.py", "outcome": "passed", "result": [{"nodeid": "test/test_enhanced_cross_document_lineage.py::TestEnhancedCrossDocumentLineage", "type": "UnitTestCase"}]}, {"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity", "outcome": "passed", "result": [{"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity::test_access_control", "type": "TestCaseFunction", "lineno": 88, "deselected": true}, {"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity::test_data_classification", "type": "TestCaseFunction", "lineno": 40, "deselected": true}, {"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity::test_encryption_config", "type": "TestCaseFunction", "lineno": 237, "deselected": true}, {"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity::test_policy_violations", "type": "TestCaseFunction", "lineno": 271, "deselected": true}, {"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity::test_security_operation_decorator", "type": "TestCaseFunction", "lineno": 361, "deselected": true}, {"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity::test_security_policy", "type": "TestCaseFunction", "lineno": 173, "deselected": true}, {"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity::test_security_session", "type": "TestCaseFunction", "lineno": 325, "deselected": true}]}, {"nodeid": "test/test_enhanced_security.py", "outcome": "passed", "result": [{"nodeid": "test/test_enhanced_security.py::TestEnhancedSecurity", "type": "UnitTestCase"}]}, {"nodeid": "test/test_helpers.py", "outcome": "passed", "result": []}, {"nodeid": "test/test_ipfs_kit_migration.py::TestIPFSKitMigration", "outcome": "passed", "result": [{"nodeid": "test/test_ipfs_kit_migration.py::TestIPFSKitMigration::test_knn_initialization", "type": "TestCaseFunction", "lineno": 27, "deselected": true}, {"nodeid": "test/test_ipfs_kit_migration.py::TestIPFSKitMigration::test_upload_migration", "type": "TestCaseFunction", "lineno": 50, "deselected": true}]}, {"nodeid": "test/test_ipfs_kit_migration.py", "outcome": "passed", "result": [{"nodeid": "test/test_ipfs_kit_migration.py::TestIPFSKitMigration", "type": "UnitTestCase"}]}, {"nodeid": "test/test_ipfs_tools.py::TestPinToIPFS", "outcome": "passed", "result": [{"nodeid": "test/test_ipfs_tools.py::TestPinToIPFS::test_pin_to_ipfs_file", "type": "Coroutine", "lineno": 29, "deselected": true}, {"nodeid": "test/test_ipfs_tools.py::TestPinToIPFS::test_pin_to_ipfs_directory", "type": "Coroutine", "lineno": 53, "deselected": true}, {"nodeid": "test/test_ipfs_tools.py::TestPinToIPFS::test_pin_to_ipfs_invalid_path", "type": "Coroutine", "lineno": 80, "deselected": true}]}, {"nodeid": "test/test_ipfs_tools.py::TestGetFromIPFS", "outcome": "passed", "result": [{"nodeid": "test/test_ipfs_tools.py::TestGetFromIPFS::test_get_from_ipfs", "type": "Coroutine", "lineno": 109, "deselected": true}, {"nodeid": "test/test_ipfs_tools.py::TestGetFromIPFS::test_get_from_ipfs_invalid_cid", "type": "Coroutine", "lineno": 134, "deselected": true}]}, {"nodeid": "test/test_ipfs_tools.py", "outcome": "passed", "result": [{"nodeid": "test/test_ipfs_tools.py::TestPinToIPFS", "type": "Class"}, {"nodeid": "test/test_ipfs_tools.py::TestGetFromIPFS", "type": "Class"}]}, {"nodeid": "test/test_ipld_optimized.py", "outcome": "passed", "result": [{"nodeid": "test/test_ipld_optimized.py::test_optimized_codec", "type": "Function", "lineno": 27, "deselected": true}]}, {"nodeid": "test/test_ipld_rag_optimizer.py::TestIPLDGraphRAGOptimizations", "outcome": "passed", "result": [{"nodeid": "test/test_ipld_rag_optimizer.py::TestIPLDGraphRAGOptimizations::test_dag_traversal_execution", "type": "TestCaseFunction", "lineno": 232, "deselected": true}, {"nodeid": "test/test_ipld_rag_optimizer.py::TestIPLDGraphRAGOptimizations::test_entity_importance_for_ipld_nodes", "type": "TestCaseFunction", "lineno": 279, "deselected": true}, {"nodeid": "test/test_ipld_rag_optimizer.py::TestIPLDGraphRAGOptimizations::test_ipld_graph_type_detection", "type": "TestCaseFunction", "lineno": 167, "deselected": true}, {"nodeid": "test/test_ipld_rag_optimizer.py::TestIPLDGraphRAGOptimizations::test_ipld_specific_optimizations", "type": "TestCaseFunction", "lineno": 199, "deselected": true}, {"nodeid": "test/test_ipld_rag_optimizer.py::TestIPLDGraphRAGOptimizations::test_query_vector_optimizations_for_ipld", "type": "TestCaseFunction", "lineno": 297, "deselected": true}]}, {"nodeid": "test/test_ipld_rag_optimizer.py", "outcome": "passed", "result": [{"nodeid": "test/test_ipld_rag_optimizer.py::TestIPLDGraphRAGOptimizations", "type": "UnitTestCase"}]}, {"nodeid": "test/test_json_serialization.py::TestJsonSerialization", "outcome": "passed", "result": [{"nodeid": "test/test_json_serialization.py::TestJsonSerialization::test_export_metrics_json", "type": "TestCaseFunction", "lineno": 115, "deselected": true}, {"nodeid": "test/test_json_serialization.py::TestJsonSerialization::test_numpy_serialization", "type": "TestCaseFunction", "lineno": 54, "deselected": true}]}, {"nodeid": "test/test_json_serialization.py", "outcome": "passed", "result": [{"nodeid": "test/test_json_serialization.py::TestJsonSerialization", "type": "UnitTestCase"}]}, {"nodeid": "test/test_jsonl_serialization.py::TestJSONLSerialization", "outcome": "passed", "result": [{"nodeid": "test/test_jsonl_serialization.py::TestJSONLSerialization::test_convert_arrow_to_jsonl", "type": "TestCaseFunction", "lineno": 125, "deselected": true}, {"nodeid": "test/test_jsonl_serialization.py::TestJSONLSerialization::test_convert_jsonl_to_huggingface", "type": "TestCaseFunction", "lineno": 106, "deselected": true}, {"nodeid": "test/test_jsonl_serialization.py::TestJSONLSerialization::test_export_to_jsonl", "type": "TestCaseFunction", "lineno": 58, "deselected": true}, {"nodeid": "test/test_jsonl_serialization.py::TestJSONLSerialization::test_import_from_jsonl", "type": "TestCaseFunction", "lineno": 81, "deselected": true}, {"nodeid": "test/test_jsonl_serialization.py::TestJSONLSerialization::test_serialize_and_deserialize_jsonl", "type": "TestCaseFunction", "lineno": 154, "deselected": true}]}, {"nodeid": "test/test_jsonl_serialization.py", "outcome": "passed", "result": [{"nodeid": "test/test_jsonl_serialization.py::TestJSONLSerialization", "type": "UnitTestCase"}]}, {"nodeid": "test/test_llm_graphrag.py::TestLLMInterface", "outcome": "passed", "result": [{"nodeid": "test/test_llm_graphrag.py::TestLLMInterface::test_llm_config", "type": "TestCaseFunction", "lineno": 129, "deselected": true}, {"nodeid": "test/test_llm_graphrag.py::TestLLMInterface::test_mock_llm_interface", "type": "TestCaseFunction", "lineno": 176, "deselected": true}, {"nodeid": "test/test_llm_graphrag.py::TestLLMInterface::test_prompt_template", "type": "TestCaseFunction", "lineno": 148, "deselected": true}]}, {"nodeid": "test/test_llm_graphrag.py::TestGraphRAGLLMProcessor", "outcome": "passed", "result": [{"nodeid": "test/test_llm_graphrag.py::TestGraphRAGLLMProcessor::test_analyze_evidence_chain", "type": "TestCaseFunction", "lineno": 232, "deselected": true}, {"nodeid": "test/test_llm_graphrag.py::TestGraphRAGLLMProcessor::test_identify_knowledge_gaps", "type": "TestCaseFunction", "lineno": 249, "deselected": true}, {"nodeid": "test/test_llm_graphrag.py::TestGraphRAGLLMProcessor::test_synthesize_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 263, "deselected": true}]}, {"nodeid": "test/test_llm_graphrag.py::TestReasoningEnhancer", "outcome": "passed", "result": [{"nodeid": "test/test_llm_graphrag.py::TestReasoningEnhancer::test_enhance_cross_document_reasoning", "type": "TestCaseFunction", "lineno": 332, "deselected": true}, {"nodeid": "test/test_llm_graphrag.py::TestReasoningEnhancer::test_enhance_document_connections", "type": "TestCaseFunction", "lineno": 289, "deselected": true}]}, {"nodeid": "test/test_llm_graphrag.py::TestGraphRAGIntegration", "outcome": "passed", "result": [{"nodeid": "test/test_llm_graphrag.py::TestGraphRAGIntegration::test_enhance_dataset_with_llm", "type": "TestCaseFunction", "lineno": 364, "deselected": true}]}, {"nodeid": "test/test_llm_graphrag.py", "outcome": "passed", "result": [{"nodeid": "test/test_llm_graphrag.py::TestLLMInterface", "type": "UnitTestCase"}, {"nodeid": "test/test_llm_graphrag.py::TestGraphRAGLLMProcessor", "type": "UnitTestCase"}, {"nodeid": "test/test_llm_graphrag.py::TestReasoningEnhancer", "type": "UnitTestCase"}, {"nodeid": "test/test_llm_graphrag.py::TestGraphRAGIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_audit_tools.py::TestMCPAuditTools", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_audit_tools.py::TestMCPAuditTools::test_generate_audit_report_comprehensive", "type": "TestCaseFunction", "lineno": 73}, {"nodeid": "test/test_mcp_audit_tools.py::TestMCPAuditTools::test_generate_audit_report_error_handling", "type": "TestCaseFunction", "lineno": 110}, {"nodeid": "test/test_mcp_audit_tools.py::TestMCPAuditTools::test_generate_audit_report_security", "type": "TestCaseFunction", "lineno": 83}, {"nodeid": "test/test_mcp_audit_tools.py::TestMCPAuditTools::test_generate_audit_report_unsupported_type", "type": "TestCaseFunction", "lineno": 119}, {"nodeid": "test/test_mcp_audit_tools.py::TestMCPAuditTools::test_generate_audit_report_with_output_path", "type": "TestCaseFunction", "lineno": 93}]}, {"nodeid": "test/test_mcp_audit_tools.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_audit_tools.py::TestMCPAuditTools", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_check_access_permission.py::TestMCPCheckAccessPermission", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_check_access_permission.py::TestMCPCheckAccessPermission::test_check_access_permission_denied", "type": "TestCaseFunction", "lineno": 41}, {"nodeid": "test/test_mcp_check_access_permission.py::TestMCPCheckAccessPermission::test_check_access_permission_error_handling", "type": "TestCaseFunction", "lineno": 57}, {"nodeid": "test/test_mcp_check_access_permission.py::TestMCPCheckAccessPermission::test_check_access_permission_granted", "type": "TestCaseFunction", "lineno": 25}]}, {"nodeid": "test/test_mcp_check_access_permission.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_check_access_permission.py::TestMCPCheckAccessPermission", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_convert_dataset_format.py::TestMCPConvertDatasetFormat", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_convert_dataset_format.py::TestMCPConvertDatasetFormat::test_convert_dataset_format_error_handling", "type": "TestCaseFunction", "lineno": 125}, {"nodeid": "test/test_mcp_convert_dataset_format.py::TestMCPConvertDatasetFormat::test_convert_dataset_format_in_memory", "type": "TestCaseFunction", "lineno": 109}, {"nodeid": "test/test_mcp_convert_dataset_format.py::TestMCPConvertDatasetFormat::test_convert_dataset_format_to_file", "type": "TestCaseFunction", "lineno": 88}]}, {"nodeid": "test/test_mcp_convert_dataset_format.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_convert_dataset_format.py::TestMCPConvertDatasetFormat", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_create_vector_index.py::TestMCPCreateVectorIndex", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_create_vector_index.py::TestMCPCreateVectorIndex::test_create_vector_index_failure", "type": "TestCaseFunction", "lineno": 44}, {"nodeid": "test/test_mcp_create_vector_index.py::TestMCPCreateVectorIndex::test_create_vector_index_success", "type": "TestCaseFunction", "lineno": 29}]}, {"nodeid": "test/test_mcp_create_vector_index.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_create_vector_index.py::TestMCPCreateVectorIndex", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_create_warc.py::TestMCPCreateWARC", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_create_warc.py::TestMCPCreateWARC::test_create_warc_failure", "type": "TestCaseFunction", "lineno": 48}, {"nodeid": "test/test_mcp_create_warc.py::TestMCPCreateWARC::test_create_warc_success", "type": "TestCaseFunction", "lineno": 34}]}, {"nodeid": "test/test_mcp_create_warc.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_create_warc.py::TestMCPCreateWARC", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_execute_command.py::TestMCPExecuteCommand", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_execute_command.py::TestMCPExecuteCommand::test_execute_command_error_handling", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "test/test_mcp_execute_command.py::TestMCPExecuteCommand::test_execute_command_success", "type": "TestCaseFunction", "lineno": 11}]}, {"nodeid": "test/test_mcp_execute_command.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_execute_command.py::TestMCPExecuteCommand", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_execute_python_snippet.py::TestMCPExecutePythonSnippet", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_execute_python_snippet.py::TestMCPExecutePythonSnippet::test_execute_python_snippet_error_handling", "type": "TestCaseFunction", "lineno": 29}, {"nodeid": "test/test_mcp_execute_python_snippet.py::TestMCPExecutePythonSnippet::test_execute_python_snippet_success", "type": "TestCaseFunction", "lineno": 11}]}, {"nodeid": "test/test_mcp_execute_python_snippet.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_execute_python_snippet.py::TestMCPExecutePythonSnippet", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_extract_dataset_from_cdxj.py::TestMCPExtractDatasetFromCDXJ", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_dataset_from_cdxj.py::TestMCPExtractDatasetFromCDXJ::test_extract_dataset_from_cdxj_failure", "type": "TestCaseFunction", "lineno": 41}, {"nodeid": "test/test_mcp_extract_dataset_from_cdxj.py::TestMCPExtractDatasetFromCDXJ::test_extract_dataset_from_cdxj_success", "type": "TestCaseFunction", "lineno": 27}]}, {"nodeid": "test/test_mcp_extract_dataset_from_cdxj.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_dataset_from_cdxj.py::TestMCPExtractDatasetFromCDXJ", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_extract_links_from_warc.py::TestMCPExtractLinksFromWARC", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_links_from_warc.py::TestMCPExtractLinksFromWARC::test_extract_links_from_warc_failure", "type": "TestCaseFunction", "lineno": 40}, {"nodeid": "test/test_mcp_extract_links_from_warc.py::TestMCPExtractLinksFromWARC::test_extract_links_from_warc_success", "type": "TestCaseFunction", "lineno": 27}]}, {"nodeid": "test/test_mcp_extract_links_from_warc.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_links_from_warc.py::TestMCPExtractLinksFromWARC", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_extract_metadata_from_warc.py::TestMCPExtractMetadataFromWARC", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_metadata_from_warc.py::TestMCPExtractMetadataFromWARC::test_extract_metadata_from_warc_failure", "type": "TestCaseFunction", "lineno": 39}, {"nodeid": "test/test_mcp_extract_metadata_from_warc.py::TestMCPExtractMetadataFromWARC::test_extract_metadata_from_warc_success", "type": "TestCaseFunction", "lineno": 27}]}, {"nodeid": "test/test_mcp_extract_metadata_from_warc.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_metadata_from_warc.py::TestMCPExtractMetadataFromWARC", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_extract_text_from_warc.py::TestMCPExtractTextFromWARC", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_text_from_warc.py::TestMCPExtractTextFromWARC::test_extract_text_from_warc_failure", "type": "TestCaseFunction", "lineno": 38}, {"nodeid": "test/test_mcp_extract_text_from_warc.py::TestMCPExtractTextFromWARC::test_extract_text_from_warc_success", "type": "TestCaseFunction", "lineno": 26}]}, {"nodeid": "test/test_mcp_extract_text_from_warc.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_extract_text_from_warc.py::TestMCPExtractTextFromWARC", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_get_from_ipfs.py::TestMCPGetFromIPFS", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_get_from_ipfs.py::TestMCPGetFromIPFS::test_get_from_ipfs_failure", "type": "TestCaseFunction", "lineno": 38}, {"nodeid": "test/test_mcp_get_from_ipfs.py::TestMCPGetFromIPFS::test_get_from_ipfs_success", "type": "TestCaseFunction", "lineno": 23}]}, {"nodeid": "test/test_mcp_get_from_ipfs.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_get_from_ipfs.py::TestMCPGetFromIPFS", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_index_warc.py::TestMCPIndexWARC", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_index_warc.py::TestMCPIndexWARC::test_index_warc_failure", "type": "TestCaseFunction", "lineno": 37}, {"nodeid": "test/test_mcp_index_warc.py::TestMCPIndexWARC::test_index_warc_success", "type": "TestCaseFunction", "lineno": 24}]}, {"nodeid": "test/test_mcp_index_warc.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_index_warc.py::TestMCPIndexWARC", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_load_dataset.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_load_dataset.py::test_load_dataset_success", "type": "Coroutine", "lineno": 14}, {"nodeid": "test/test_mcp_load_dataset.py::test_load_dataset_with_format_and_options", "type": "Coroutine", "lineno": 28}, {"nodeid": "test/test_mcp_load_dataset.py::test_load_dataset_with_splits", "type": "Coroutine", "lineno": 44}, {"nodeid": "test/test_mcp_load_dataset.py::test_load_dataset_error", "type": "Coroutine", "lineno": 60}]}, {"nodeid": "test/test_mcp_pin_to_ipfs.py::TestMCPPinToIPFS", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_pin_to_ipfs.py::TestMCPPinToIPFS::test_pin_to_ipfs_add_failure", "type": "TestCaseFunction", "lineno": 46}, {"nodeid": "test/test_mcp_pin_to_ipfs.py::TestMCPPinToIPFS::test_pin_to_ipfs_pin_failure", "type": "TestCaseFunction", "lineno": 62}, {"nodeid": "test/test_mcp_pin_to_ipfs.py::TestMCPPinToIPFS::test_pin_to_ipfs_success", "type": "TestCaseFunction", "lineno": 28}]}, {"nodeid": "test/test_mcp_pin_to_ipfs.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_pin_to_ipfs.py::TestMCPPinToIPFS", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_process_dataset.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_no_operations", "type": "Coroutine", "lineno": 149}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_filter_operation", "type": "Coroutine", "lineno": 161}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_select_operation", "type": "Coroutine", "lineno": 173}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_rename_operation", "type": "Coroutine", "lineno": 185}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_sort_operation", "type": "Coroutine", "lineno": 197}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_limit_operation", "type": "Coroutine", "lineno": 209}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_map_lower_operation", "type": "Coroutine", "lineno": 221}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_unique_operation", "type": "Coroutine", "lineno": 233}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_error_handling", "type": "Coroutine", "lineno": 245}, {"nodeid": "test/test_mcp_process_dataset.py::test_process_dataset_with_datasetdict", "type": "Coroutine", "lineno": 258}]}, {"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph::test_query_knowledge_graph_cypher_success", "type": "TestCaseFunction", "lineno": 57}, {"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph::test_query_knowledge_graph_error_handling", "type": "TestCaseFunction", "lineno": 115}, {"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph::test_query_knowledge_graph_gremlin_success", "type": "TestCaseFunction", "lineno": 72}, {"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph::test_query_knowledge_graph_semantic_success", "type": "TestCaseFunction", "lineno": 87}, {"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph::test_query_knowledge_graph_sparql_success", "type": "TestCaseFunction", "lineno": 42}, {"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph::test_query_knowledge_graph_unsupported_query_type", "type": "TestCaseFunction", "lineno": 102}]}, {"nodeid": "test/test_mcp_query_knowledge_graph.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_query_knowledge_graph.py::TestMCPQueryKnowledgeGraph", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_record_audit_event.py::TestMCPRecordAuditEvent", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_record_audit_event.py::TestMCPRecordAuditEvent::test_record_audit_event_error_handling", "type": "TestCaseFunction", "lineno": 77}, {"nodeid": "test/test_mcp_record_audit_event.py::TestMCPRecordAuditEvent::test_record_audit_event_success", "type": "TestCaseFunction", "lineno": 42}]}, {"nodeid": "test/test_mcp_record_audit_event.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_record_audit_event.py::TestMCPRecordAuditEvent", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_record_provenance.py::TestMCPRecordProvenance", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_record_provenance.py::TestMCPRecordProvenance::test_record_provenance_failure", "type": "TestCaseFunction", "lineno": 46}, {"nodeid": "test/test_mcp_record_provenance.py::TestMCPRecordProvenance::test_record_provenance_success", "type": "TestCaseFunction", "lineno": 24}]}, {"nodeid": "test/test_mcp_record_provenance.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_record_provenance.py::TestMCPRecordProvenance", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_save_dataset.py::TestMCPSaveDataset", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_save_dataset.py::TestMCPSaveDataset::test_save_dataset_not_found", "type": "TestCaseFunction", "lineno": 82}, {"nodeid": "test/test_mcp_save_dataset.py::TestMCPSaveDataset::test_save_dataset_simulated_error", "type": "TestCaseFunction", "lineno": 95}, {"nodeid": "test/test_mcp_save_dataset.py::TestMCPSaveDataset::test_save_dataset_success", "type": "TestCaseFunction", "lineno": 45}, {"nodeid": "test/test_mcp_save_dataset.py::TestMCPSaveDataset::test_save_dataset_with_options", "type": "TestCaseFunction", "lineno": 63}]}, {"nodeid": "test/test_mcp_save_dataset.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_save_dataset.py::TestMCPSaveDataset", "type": "UnitTestCase"}]}, {"nodeid": "test/test_mcp_search_vector_index.py::TestMCPSearchVectorIndex", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_search_vector_index.py::TestMCPSearchVectorIndex::test_search_vector_index_failure", "type": "TestCaseFunction", "lineno": 39}, {"nodeid": "test/test_mcp_search_vector_index.py::TestMCPSearchVectorIndex::test_search_vector_index_success", "type": "TestCaseFunction", "lineno": 23}]}, {"nodeid": "test/test_mcp_search_vector_index.py", "outcome": "passed", "result": [{"nodeid": "test/test_mcp_search_vector_index.py::TestMCPSearchVectorIndex", "type": "UnitTestCase"}]}, {"nodeid": "test/test_minimal.py", "outcome": "passed", "result": [{"nodeid": "test/test_minimal.py::test_simple", "type": "Function", "lineno": 2, "deselected": true}]}, {"nodeid": "test/test_only_json_serialization.py::TestJSONLSerialization", "outcome": "passed", "result": [{"nodeid": "test/test_only_json_serialization.py::TestJSONLSerialization::test_export_to_jsonl", "type": "TestCaseFunction", "lineno": 166, "deselected": true}, {"nodeid": "test/test_only_json_serialization.py::TestJSONLSerialization::test_serialize_and_deserialize_jsonl", "type": "TestCaseFunction", "lineno": 189, "deselected": true}]}, {"nodeid": "test/test_only_json_serialization.py", "outcome": "passed", "result": [{"nodeid": "test/test_only_json_serialization.py::TestJSONLSerialization", "type": "UnitTestCase"}]}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryRewriter", "outcome": "passed", "result": [{"nodeid": "test/test_only_rag_optimizer.py::TestQueryRewriter::test_domain_specific_optimizations", "type": "TestCaseFunction", "lineno": 1405, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryRewriter::test_join_reordering", "type": "TestCaseFunction", "lineno": 1372, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryRewriter::test_pattern_specific_optimizations", "type": "TestCaseFunction", "lineno": 1387, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryRewriter::test_predicate_pushdown", "type": "TestCaseFunction", "lineno": 1352, "deselected": true}]}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryBudgetManager", "outcome": "passed", "result": [{"nodeid": "test/test_only_rag_optimizer.py::TestQueryBudgetManager::test_budget_allocation", "type": "TestCaseFunction", "lineno": 1437, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryBudgetManager::test_consumption_tracking", "type": "TestCaseFunction", "lineno": 1467, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryBudgetManager::test_early_stopping", "type": "TestCaseFunction", "lineno": 1500, "deselected": true}]}, {"nodeid": "test/test_only_rag_optimizer.py::TestUnifiedGraphRAGQueryOptimizer", "outcome": "passed", "result": [{"nodeid": "test/test_only_rag_optimizer.py::TestUnifiedGraphRAGQueryOptimizer::test_entity_importance_calculation", "type": "TestCaseFunction", "lineno": 1617, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestUnifiedGraphRAGQueryOptimizer::test_execute_query", "type": "TestCaseFunction", "lineno": 1586, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestUnifiedGraphRAGQueryOptimizer::test_optimize_query", "type": "TestCaseFunction", "lineno": 1558, "deselected": true}, {"nodeid": "test/test_only_rag_optimizer.py::TestUnifiedGraphRAGQueryOptimizer::test_optimizer_instantiation", "type": "TestCaseFunction", "lineno": 1550, "deselected": true}]}, {"nodeid": "test/test_only_rag_optimizer.py", "outcome": "passed", "result": [{"nodeid": "test/test_only_rag_optimizer.py::TestQueryRewriter", "type": "UnitTestCase"}, {"nodeid": "test/test_only_rag_optimizer.py::TestQueryBudgetManager", "type": "UnitTestCase"}, {"nodeid": "test/test_only_rag_optimizer.py::TestUnifiedGraphRAGQueryOptimizer", "type": "UnitTestCase"}]}, {"nodeid": "test/test_optimizer_learning.py::TestOptimizerLearningMetricsCollector", "outcome": "passed", "result": [{"nodeid": "test/test_optimizer_learning.py::TestOptimizerLearningMetricsCollector::test_json_serialization", "type": "TestCaseFunction", "lineno": 176, "deselected": true}, {"nodeid": "test/test_optimizer_learning.py::TestOptimizerLearningMetricsCollector::test_record_learning_cycle", "type": "TestCaseFunction", "lineno": 40, "deselected": true}, {"nodeid": "test/test_optimizer_learning.py::TestOptimizerLearningMetricsCollector::test_record_parameter_adaptation", "type": "TestCaseFunction", "lineno": 65, "deselected": true}, {"nodeid": "test/test_optimizer_learning.py::TestOptimizerLearningMetricsCollector::test_record_query_pattern", "type": "TestCaseFunction", "lineno": 137, "deselected": true}, {"nodeid": "test/test_optimizer_learning.py::TestOptimizerLearningMetricsCollector::test_record_strategy_effectiveness", "type": "TestCaseFunction", "lineno": 99, "deselected": true}]}, {"nodeid": "test/test_optimizer_learning.py", "outcome": "passed", "result": [{"nodeid": "test/test_optimizer_learning.py::TestOptimizerLearningMetricsCollector", "type": "UnitTestCase"}]}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector", "outcome": "passed", "result": [{"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector::test_get_learning_metrics", "type": "TestCaseFunction", "lineno": 179, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector::test_initialization", "type": "TestCaseFunction", "lineno": 43, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector::test_numpy_serialization", "type": "TestCaseFunction", "lineno": 159, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector::test_record_learning_cycle", "type": "TestCaseFunction", "lineno": 50, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector::test_record_parameter_adaptation", "type": "TestCaseFunction", "lineno": 75, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector::test_record_query_pattern", "type": "TestCaseFunction", "lineno": 124, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector::test_record_strategy_effectiveness", "type": "TestCaseFunction", "lineno": 96, "deselected": true}]}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningVisualization", "outcome": "passed", "result": [{"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningVisualization::test_create_interactive_learning_dashboard", "type": "TestCaseFunction", "lineno": 358, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningVisualization::test_visualize_learning_cycles", "type": "TestCaseFunction", "lineno": 280, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningVisualization::test_visualize_parameter_adaptations", "type": "TestCaseFunction", "lineno": 306, "deselected": true}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningVisualization::test_visualize_strategy_effectiveness", "type": "TestCaseFunction", "lineno": 332, "deselected": true}]}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestDashboardIntegration", "outcome": "passed", "result": [{"nodeid": "test/test_optimizer_learning_visualization.py::TestDashboardIntegration::test_dashboard_with_learning_metrics", "type": "TestCaseFunction", "lineno": 438, "deselected": true}]}, {"nodeid": "test/test_optimizer_learning_visualization.py", "outcome": "passed", "result": [{"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningMetricsCollector", "type": "UnitTestCase"}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestOptimizerLearningVisualization", "type": "UnitTestCase"}, {"nodeid": "test/test_optimizer_learning_visualization.py::TestDashboardIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard", "outcome": "passed", "result": [{"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard::test_create_integrated_dashboard", "type": "TestCaseFunction", "lineno": 151, "deselected": true}, {"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard::test_generate_provenance_report_html", "type": "TestCaseFunction", "lineno": 81, "deselected": true}, {"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard::test_generate_provenance_report_markdown_fallback", "type": "TestCaseFunction", "lineno": 127, "deselected": true}, {"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard::test_initialization", "type": "TestCaseFunction", "lineno": 49, "deselected": true}, {"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard::test_setup_provenance_dashboard", "type": "TestCaseFunction", "lineno": 173, "deselected": true}, {"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard::test_visualize_data_lineage", "type": "TestCaseFunction", "lineno": 56, "deselected": true}]}, {"nodeid": "test/test_provenance_dashboard.py", "outcome": "passed", "result": [{"nodeid": "test/test_provenance_dashboard.py::TestProvenanceDashboard", "type": "UnitTestCase"}]}, {"nodeid": "test/test_provenance_functions.py::TestProvenanceFunctions", "outcome": "passed", "result": [{"nodeid": "test/test_provenance_functions.py::TestProvenanceFunctions::test_format_lineage_as_dot", "type": "TestCaseFunction", "lineno": 107, "deselected": true}, {"nodeid": "test/test_provenance_functions.py::TestProvenanceFunctions::test_format_report_as_html", "type": "TestCaseFunction", "lineno": 44, "deselected": true}, {"nodeid": "test/test_provenance_functions.py::TestProvenanceFunctions::test_format_report_as_markdown", "type": "TestCaseFunction", "lineno": 76, "deselected": true}, {"nodeid": "test/test_provenance_functions.py::TestProvenanceFunctions::test_format_report_as_text", "type": "TestCaseFunction", "lineno": 13, "deselected": true}]}, {"nodeid": "test/test_provenance_functions.py", "outcome": "passed", "result": [{"nodeid": "test/test_provenance_functions.py::TestProvenanceFunctions", "type": "UnitTestCase"}]}, {"nodeid": "test/test_provenance_report.py::TestProvenanceReporting", "outcome": "passed", "result": [{"nodeid": "test/test_provenance_report.py::TestProvenanceReporting::test_generate_lineage_visualization", "type": "TestCaseFunction", "lineno": 97, "deselected": true}, {"nodeid": "test/test_provenance_report.py::TestProvenanceReporting::test_generate_provenance_report_json", "type": "TestCaseFunction", "lineno": 74, "deselected": true}]}, {"nodeid": "test/test_provenance_report.py", "outcome": "passed", "result": [{"nodeid": "test/test_provenance_report.py::TestProvenanceReporting", "type": "UnitTestCase"}]}, {"nodeid": "test/test_rag_query_optimizer.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/test_rag_query_optimizer.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/test_rag_query_optimizer.py:11: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'GraphRAGQueryStats' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/test_rag_query_optimizer_integration.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/test_rag_query_optimizer_integration.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/test_rag_query_optimizer_integration.py:22: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'GraphRAGQueryStats' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/test_rag_query_optimizer_pytest.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/test_rag_query_optimizer_pytest.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/test_rag_query_optimizer_pytest.py:24: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'GraphRAGQueryStats' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/test_rag_query_visualization.py::TestQueryMetricsCollector", "outcome": "passed", "result": [{"nodeid": "test/test_rag_query_visualization.py::TestQueryMetricsCollector::test_anomaly_detection", "type": "TestCaseFunction", "lineno": 120, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestQueryMetricsCollector::test_get_performance_metrics", "type": "TestCaseFunction", "lineno": 106, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestQueryMetricsCollector::test_record_query", "type": "TestCaseFunction", "lineno": 86, "deselected": true}]}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer", "outcome": "passed", "result": [{"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer::test_enhanced_visualizer_timeline", "type": "TestCaseFunction", "lineno": 335, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer::test_plot_query_performance", "type": "TestCaseFunction", "lineno": 194, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer::test_plot_query_term_frequency", "type": "TestCaseFunction", "lineno": 206, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer::test_query_audit_integration", "type": "TestCaseFunction", "lineno": 214, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer::test_query_audit_timeline_integration", "type": "TestCaseFunction", "lineno": 347, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer::test_security_correlation_visualization", "type": "TestCaseFunction", "lineno": 237, "deselected": true}]}, {"nodeid": "test/test_rag_query_visualization.py::TestIntegratedMonitoringSystem", "outcome": "passed", "result": [{"nodeid": "test/test_rag_query_visualization.py::TestIntegratedMonitoringSystem::test_create_integrated_monitoring_system", "type": "TestCaseFunction", "lineno": 378, "deselected": true}]}, {"nodeid": "test/test_rag_query_visualization.py::TestDashboardAuditIntegration", "outcome": "passed", "result": [{"nodeid": "test/test_rag_query_visualization.py::TestDashboardAuditIntegration::test_dashboard_with_security_visualization", "type": "TestCaseFunction", "lineno": 489, "deselected": true}]}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector", "outcome": "passed", "result": [{"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_create_interactive_learning_dashboard", "type": "TestCaseFunction", "lineno": 743, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_json_serialization", "type": "TestCaseFunction", "lineno": 766, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_record_learning_cycle", "type": "TestCaseFunction", "lineno": 555, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_record_parameter_adaptation", "type": "TestCaseFunction", "lineno": 580, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_record_query_pattern", "type": "TestCaseFunction", "lineno": 652, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_record_strategy_effectiveness", "type": "TestCaseFunction", "lineno": 614, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_visualize_learning_cycles", "type": "TestCaseFunction", "lineno": 691, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector::test_visualize_parameter_adaptations", "type": "TestCaseFunction", "lineno": 717, "deselected": true}]}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryDashboardLearningIntegration", "outcome": "passed", "result": [{"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryDashboardLearningIntegration::test_dashboard_includes_interactive_learning_metrics", "type": "TestCaseFunction", "lineno": 920, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryDashboardLearningIntegration::test_dashboard_without_learning_metrics", "type": "TestCaseFunction", "lineno": 943, "deselected": true}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryDashboardLearningIntegration::test_generate_integrated_dashboard", "type": "TestCaseFunction", "lineno": 888, "deselected": true}]}, {"nodeid": "test/test_rag_query_visualization.py", "outcome": "passed", "result": [{"nodeid": "test/test_rag_query_visualization.py::TestQueryMetricsCollector", "type": "UnitTestCase"}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryVisualizer", "type": "UnitTestCase"}, {"nodeid": "test/test_rag_query_visualization.py::TestIntegratedMonitoringSystem", "type": "UnitTestCase"}, {"nodeid": "test/test_rag_query_visualization.py::TestDashboardAuditIntegration", "type": "UnitTestCase"}, {"nodeid": "test/test_rag_query_visualization.py::TestOptimizerLearningMetricsCollector", "type": "UnitTestCase"}, {"nodeid": "test/test_rag_query_visualization.py::TestRAGQueryDashboardLearningIntegration", "type": "UnitTestCase"}]}, {"nodeid": "test/test_statistical_learning.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/test_statistical_learning.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/test_statistical_learning.py:25: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'GraphRAGQueryStats' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test/test_wikipedia_rag_optimizer.py", "outcome": "failed", "result": [], "longrepr": "ImportError while importing test module '/home/barberb/ipfs_datasets_py/test/test_wikipedia_rag_optimizer.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntest/test_wikipedia_rag_optimizer.py:13: in <module>\n    from ipfs_datasets_py.wikipedia_rag_optimizer import (\nipfs_datasets_py/wikipedia_rag_optimizer.py:25: in <module>\n    from ipfs_datasets_py.rag_query_optimizer import (\nE   ImportError: cannot import name 'GraphRAGQueryOptimizer' from 'ipfs_datasets_py.rag_query_optimizer' (/home/barberb/ipfs_datasets_py/ipfs_datasets_py/rag_query_optimizer.py)"}, {"nodeid": "test", "outcome": "passed", "result": [{"nodeid": "test/phase1", "type": "Package"}, {"nodeid": "test/test_audit_provenance_dashboard.py", "type": "Module"}, {"nodeid": "test/test_audit_provenance_integration.py", "type": "Module"}, {"nodeid": "test/test_audit_reporting.py", "type": "Module"}, {"nodeid": "test/test_audit_tools.py", "type": "Module"}, {"nodeid": "test/test_audit_visualization.py", "type": "Module"}, {"nodeid": "test/test_cross_document_lineage.py", "type": "Module"}, {"nodeid": "test/test_cross_document_lineage_enhanced.py", "type": "Module"}, {"nodeid": "test/test_cross_document_lineage_implementation.py", "type": "Module"}, {"nodeid": "test/test_dataset_tools.py", "type": "Module"}, {"nodeid": "test/test_enhanced_cross_document_lineage.py", "type": "Module"}, {"nodeid": "test/test_enhanced_security.py", "type": "Module"}, {"nodeid": "test/test_helpers.py", "type": "Module"}, {"nodeid": "test/test_ipfs_kit_migration.py", "type": "Module"}, {"nodeid": "test/test_ipfs_tools.py", "type": "Module"}, {"nodeid": "test/test_ipld_optimized.py", "type": "Module"}, {"nodeid": "test/test_ipld_rag_optimizer.py", "type": "Module"}, {"nodeid": "test/test_json_serialization.py", "type": "Module"}, {"nodeid": "test/test_jsonl_serialization.py", "type": "Module"}, {"nodeid": "test/test_llm_graphrag.py", "type": "Module"}, {"nodeid": "test/test_mcp_audit_tools.py", "type": "Module"}, {"nodeid": "test/test_mcp_check_access_permission.py", "type": "Module"}, {"nodeid": "test/test_mcp_convert_dataset_format.py", "type": "Module"}, {"nodeid": "test/test_mcp_create_vector_index.py", "type": "Module"}, {"nodeid": "test/test_mcp_create_warc.py", "type": "Module"}, {"nodeid": "test/test_mcp_execute_command.py", "type": "Module"}, {"nodeid": "test/test_mcp_execute_python_snippet.py", "type": "Module"}, {"nodeid": "test/test_mcp_extract_dataset_from_cdxj.py", "type": "Module"}, {"nodeid": "test/test_mcp_extract_links_from_warc.py", "type": "Module"}, {"nodeid": "test/test_mcp_extract_metadata_from_warc.py", "type": "Module"}, {"nodeid": "test/test_mcp_extract_text_from_warc.py", "type": "Module"}, {"nodeid": "test/test_mcp_get_from_ipfs.py", "type": "Module"}, {"nodeid": "test/test_mcp_index_warc.py", "type": "Module"}, {"nodeid": "test/test_mcp_load_dataset.py", "type": "Module"}, {"nodeid": "test/test_mcp_pin_to_ipfs.py", "type": "Module"}, {"nodeid": "test/test_mcp_process_dataset.py", "type": "Module"}, {"nodeid": "test/test_mcp_query_knowledge_graph.py", "type": "Module"}, {"nodeid": "test/test_mcp_record_audit_event.py", "type": "Module"}, {"nodeid": "test/test_mcp_record_provenance.py", "type": "Module"}, {"nodeid": "test/test_mcp_save_dataset.py", "type": "Module"}, {"nodeid": "test/test_mcp_search_vector_index.py", "type": "Module"}, {"nodeid": "test/test_minimal.py", "type": "Module"}, {"nodeid": "test/test_only_json_serialization.py", "type": "Module"}, {"nodeid": "test/test_only_rag_optimizer.py", "type": "Module"}, {"nodeid": "test/test_optimizer_learning.py", "type": "Module"}, {"nodeid": "test/test_optimizer_learning_visualization.py", "type": "Module"}, {"nodeid": "test/test_provenance_dashboard.py", "type": "Module"}, {"nodeid": "test/test_provenance_functions.py", "type": "Module"}, {"nodeid": "test/test_provenance_report.py", "type": "Module"}, {"nodeid": "test/test_rag_query_optimizer.py", "type": "Module"}, {"nodeid": "test/test_rag_query_optimizer_integration.py", "type": "Module"}, {"nodeid": "test/test_rag_query_optimizer_pytest.py", "type": "Module"}, {"nodeid": "test/test_rag_query_visualization.py", "type": "Module"}, {"nodeid": "test/test_statistical_learning.py", "type": "Module"}, {"nodeid": "test/test_wikipedia_rag_optimizer.py", "type": "Module"}]}], "tests": []}